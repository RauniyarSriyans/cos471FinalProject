{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInterfaceAdapter = void 0;\nconst web3_1 = require(\"./web3\");\nconst getNetworkTypeClass = function () {\n  let networkType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ethereum\";\n  const supportedEvmNetworks = [\"ethereum\", \"fabric-evm\", \"quorum\"];\n  if (supportedEvmNetworks.includes(networkType)) return \"evm-like\";\n  return networkType;\n};\nconst createInterfaceAdapter = options => {\n  const {\n    networkType\n  } = options;\n  switch (getNetworkTypeClass(networkType)) {\n    case \"evm-like\":\n      {\n        const {\n          provider\n        } = options;\n        return new web3_1.Web3InterfaceAdapter({\n          networkType: networkType,\n          provider: provider\n        });\n      }\n    default:\n      throw Error(`Sorry, \"${networkType}\" is not supported at this time.`);\n  }\n};\nexports.createInterfaceAdapter = createInterfaceAdapter;","map":{"version":3,"names":["web3_1","require","getNetworkTypeClass","networkType","arguments","length","undefined","supportedEvmNetworks","includes","createInterfaceAdapter","options","provider","Web3InterfaceAdapter","Error","exports"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/interface-adapter/lib/adapter/index.ts"],"sourcesContent":["import { Web3InterfaceAdapter, Web3InterfaceAdapterOptions } from \"./web3\";\n\nimport type { InterfaceAdapter } from \"./types\";\n\nexport type InterfaceAdapterOptions = Web3InterfaceAdapterOptions;\n\nconst getNetworkTypeClass = (networkType = \"ethereum\") => {\n  const supportedEvmNetworks = [\"ethereum\", \"fabric-evm\", \"quorum\"];\n\n  if (supportedEvmNetworks.includes(networkType)) return \"evm-like\";\n  return networkType;\n};\n\nexport const createInterfaceAdapter = (\n  options: InterfaceAdapterOptions\n): InterfaceAdapter => {\n  const { networkType } = options;\n\n  switch (getNetworkTypeClass(networkType)) {\n    case \"evm-like\": {\n      const { provider } = options;\n\n      return new Web3InterfaceAdapter({\n        networkType: networkType,\n        provider: provider\n      });\n    }\n    default:\n      throw Error(`Sorry, \"${networkType}\" is not supported at this time.`);\n  }\n};\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAMA,MAAMC,mBAAmB,GAAG,SAAAA,CAAA,EAA6B;EAAA,IAA5BC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,UAAU;EACnD,MAAMG,oBAAoB,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC;EAEjE,IAAIA,oBAAoB,CAACC,QAAQ,CAACL,WAAW,CAAC,EAAE,OAAO,UAAU;EACjE,OAAOA,WAAW;AACpB,CAAC;AAEM,MAAMM,sBAAsB,GACjCC,OAAgC,IACZ;EACpB,MAAM;IAAEP;EAAW,CAAE,GAAGO,OAAO;EAE/B,QAAQR,mBAAmB,CAACC,WAAW,CAAC;IACtC,KAAK,UAAU;MAAE;QACf,MAAM;UAAEQ;QAAQ,CAAE,GAAGD,OAAO;QAE5B,OAAO,IAAIV,MAAA,CAAAY,oBAAoB,CAAC;UAC9BT,WAAW,EAAEA,WAAW;UACxBQ,QAAQ,EAAEA;SACX,CAAC;;IAEJ;MACE,MAAME,KAAK,CAAC,WAAWV,WAAW,kCAAkC,CAAC;;AAE3E,CAAC;AAjBYW,OAAA,CAAAL,sBAAsB,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}