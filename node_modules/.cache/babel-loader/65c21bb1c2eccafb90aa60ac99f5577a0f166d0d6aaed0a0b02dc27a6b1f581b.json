{"ast":null,"code":"const debug = require(\"debug\")(\"contract:promievent\");\nconst DebugUtils = require(\"@truffle/debug-utils\");\nconst Web3PromiEvent = require(\"web3-core-promievent\");\nfunction PromiEvent(justPromise) {\n  let bugger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let isDeploy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const {\n    resolve,\n    reject,\n    eventEmitter\n  } = new Web3PromiEvent(justPromise);\n  const originalStackTrace = new Error().stack;\n  function rejectHijacker(e) {\n    debug(\"hijacking!\");\n    debug(\"hash: %s\", this.txHash);\n    let getSolidityStackTrace;\n    if (bugger && this.txHash) {\n      debug(\"debugging time!\");\n      getSolidityStackTrace = async () => {\n        try {\n          await bugger.load(this.txHash);\n          await bugger.runToEnd();\n          const report = bugger.stacktrace();\n          await bugger.unload();\n          return DebugUtils.formatStacktrace(report, 4); //indent 4 to match node's stacktraces\n        } catch (_) {\n          //ignore errors\n          return undefined;\n        }\n      };\n    } else {\n      getSolidityStackTrace = async () => undefined;\n    }\n    getSolidityStackTrace().then(solidityStackTrace => {\n      debug(\"e.stack: %s\", e.stack);\n      debug(\"originalStackTrace: %s\", originalStackTrace);\n      debug(\"solidityStackTrace: %s\", solidityStackTrace);\n      const initialLinesRegexp = isDeploy ? /^.*\\n.*\\n.*\\n.*/ //first 4 lines (note . does not include \\n)\n      : /^.*\\n.*\\n.*/; //first 3 lines\n      //we replace not just the first line but also the next 2 as they contain\n      //useless stuff users shouldn't see; in case of deployments there's one\n      //additional to remove\n      try {\n        let stackTrace = originalStackTrace.replace(initialLinesRegexp, e.stack.split(\"\\n\")[0]);\n        if (solidityStackTrace) {\n          //let's split the solidity stack trace into first line & rest\n          let [_, solidityFirstLine, solidityRemaining] = solidityStackTrace.match(/^(.*?)\\r?\\n((.|\\r|\\n)*)$/);\n          stackTrace = stackTrace.replace(/^.*/,\n          //note that . does not include \\n\n          solidityRemaining //note: this does not end in \\n, so no modification needed\n          );\n\n          e.hijackedMessage = e.message;\n          e.message = solidityFirstLine;\n        }\n        e.hijackedStack = e.stack;\n        e.stack = stackTrace;\n      } catch (_) {\n        //again, ignore errors\n        //(not sure how this can happen here but I'll leave this block here)\n      }\n      reject(e);\n    });\n  }\n  this.resolve = resolve;\n  this.reject = rejectHijacker.bind(this);\n  this.eventEmitter = eventEmitter;\n  if (bugger) {\n    this.debug = true;\n  }\n}\nPromiEvent.resolve = Web3PromiEvent.resolve;\nPromiEvent.prototype.setTransactionHash = function (txHash) {\n  debug(\"setting!\");\n  debug(\"hash: %s\", txHash);\n  this.txHash = txHash;\n};\nmodule.exports = PromiEvent;","map":{"version":3,"names":["debug","require","DebugUtils","Web3PromiEvent","PromiEvent","justPromise","bugger","arguments","length","undefined","isDeploy","resolve","reject","eventEmitter","originalStackTrace","Error","stack","rejectHijacker","e","txHash","getSolidityStackTrace","load","runToEnd","report","stacktrace","unload","formatStacktrace","_","then","solidityStackTrace","initialLinesRegexp","stackTrace","replace","split","solidityFirstLine","solidityRemaining","match","hijackedMessage","message","hijackedStack","bind","prototype","setTransactionHash","module","exports"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/contract/lib/promievent.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:promievent\");\nconst DebugUtils = require(\"@truffle/debug-utils\");\nconst Web3PromiEvent = require(\"web3-core-promievent\");\n\nfunction PromiEvent(justPromise, bugger = undefined, isDeploy = false) {\n  const { resolve, reject, eventEmitter } = new Web3PromiEvent(justPromise);\n\n  const originalStackTrace = new Error().stack;\n\n  function rejectHijacker(e) {\n    debug(\"hijacking!\");\n    debug(\"hash: %s\", this.txHash);\n    let getSolidityStackTrace;\n    if (bugger && this.txHash) {\n      debug(\"debugging time!\");\n      getSolidityStackTrace = async () => {\n        try {\n          await bugger.load(this.txHash);\n          await bugger.runToEnd();\n          const report = bugger.stacktrace();\n          await bugger.unload();\n          return DebugUtils.formatStacktrace(report, 4); //indent 4 to match node's stacktraces\n        } catch (_) {\n          //ignore errors\n          return undefined;\n        }\n      };\n    } else {\n      getSolidityStackTrace = async () => undefined;\n    }\n\n    getSolidityStackTrace().then((solidityStackTrace) => {\n      debug(\"e.stack: %s\", e.stack);\n      debug(\"originalStackTrace: %s\", originalStackTrace);\n      debug(\"solidityStackTrace: %s\", solidityStackTrace);\n      const initialLinesRegexp = isDeploy\n        ? /^.*\\n.*\\n.*\\n.*/ //first 4 lines (note . does not include \\n)\n        : /^.*\\n.*\\n.*/; //first 3 lines\n      //we replace not just the first line but also the next 2 as they contain\n      //useless stuff users shouldn't see; in case of deployments there's one\n      //additional to remove\n      try {\n        let stackTrace = originalStackTrace.replace(\n          initialLinesRegexp,\n          e.stack.split(\"\\n\")[0]\n        );\n        if (solidityStackTrace) {\n          //let's split the solidity stack trace into first line & rest\n          let [\n            _,\n            solidityFirstLine,\n            solidityRemaining,\n          ] = solidityStackTrace.match(/^(.*?)\\r?\\n((.|\\r|\\n)*)$/);\n\n          stackTrace = stackTrace.replace(\n            /^.*/, //note that . does not include \\n\n            solidityRemaining //note: this does not end in \\n, so no modification needed\n          );\n          e.hijackedMessage = e.message;\n          e.message = solidityFirstLine;\n        }\n\n        e.hijackedStack = e.stack;\n        e.stack = stackTrace;\n      } catch (_) {\n        //again, ignore errors\n        //(not sure how this can happen here but I'll leave this block here)\n      }\n      reject(e);\n    });\n  }\n\n  this.resolve = resolve;\n  this.reject = rejectHijacker.bind(this);\n  this.eventEmitter = eventEmitter;\n  if (bugger) {\n    this.debug = true;\n  }\n}\n\nPromiEvent.resolve = Web3PromiEvent.resolve;\n\nPromiEvent.prototype.setTransactionHash = function (txHash) {\n  debug(\"setting!\");\n  debug(\"hash: %s\", txHash);\n  this.txHash = txHash;\n};\n\nmodule.exports = PromiEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}