{"ast":null,"code":"const debug = require(\"debug\")(\"contract:utils\");\nconst web3Utils = require(\"web3-utils\");\nconst {\n  bigNumberify\n} = require(\"ethers/utils/bignumber\");\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"../reformat\");\nconst ens = require(\"./ens\");\nconst allowedTxParams = new Set([\"from\", \"to\", \"gas\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\", \"data\", \"nonce\", \"accessList\", \"type\", \"privateFor\", \"overwrite\"]);\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n\n    //NOTE: For some reason, contrary to the docs,\n    //web3Utils.isBigNumber returns true not only for\n    //bignumber.js BigNumbers, but also for ethers BigNumbers,\n    //even though these are totally different things.\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n  isTxParams(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    return Object.keys(val).some(fieldName => allowedTxParams.has(fieldName));\n  },\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n    return logs.map(log => {\n      const logABI = constructor.events[log.topics[0]];\n      if (logABI == null) return null;\n      const copy = Utils.merge({}, log);\n      copy.event = logABI.name;\n      copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n      if (copy.data === \"0x\") copy.data = \"\";\n      let logArgs;\n      try {\n        logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n        copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n      } catch (_) {\n        return null;\n      }\n      delete copy.data;\n      delete copy.topics;\n      return copy;\n    }).filter(log => log != null);\n  },\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n    return events;\n  },\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n    return merged;\n  },\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n    return bytecode;\n  },\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    let ignoreDefaultGasPriceParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const constructor = this;\n    const expectedArgCount = methodABI ? methodABI.inputs.length : 0;\n    let txParams = {};\n    const lastArg = args[args.length - 1];\n    if (args.length === expectedArgCount + 1 && Utils.isTxParams(lastArg)) {\n      txParams = args.pop();\n    }\n    let defaultParams = constructor.class_defaults;\n    if (ignoreDefaultGasPriceParams) {\n      //this parameter is set when making calls (as opposed to transactions)\n      //gas price params can cause problems with those on some networks, so\n      //we ignore any defaults, and only include them if they were explicitly\n      //specified\n      defaultParams = {\n        ...constructor.class_defaults\n      }; //clone\n      delete defaultParams.gasPrice;\n      delete defaultParams.maxFeePerGas;\n      delete defaultParams.maxPriorityFeePerGas;\n    }\n    return Utils.merge(defaultParams, txParams);\n  },\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinkedLibraries = constructor.binary.match(regex);\n    if (unlinkedLibraries !== null) {\n      unlinkedLibraries = unlinkedLibraries.map((name // Remove underscores\n      ) => name.replace(/_/g, \"\")).sort().filter((name, index, arr) => {\n        // Remove duplicates\n        if (index + 1 >= arr.length) {\n          return true;\n        }\n        return name !== arr[index + 1];\n      }).join(\", \");\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinkedLibraries}`;\n      throw new Error(error);\n    }\n  },\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        //HACK: Since we can't rely on web3Utils.isBigNumber to tell\n        //whether we have a bignumber.js BigNumber, we'll just check\n        //whether it has the toFixed method\n        const stringValue = item.toFixed ? item.toFixed() //prevents use of scientific notation\n        : item.toString();\n        const ethersBN = bigNumberify(stringValue);\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of significant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n    const significantFigures = Math.min(decimal.toString().length - 1,\n    // length less one because `.`\n    maxPrecision);\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const multiplier = Math.round(decimal * denominator);\n    const numerator = bigNumberify(multiplier).mul(bignum);\n    return numerator.div(denominator);\n  },\n  // checks if given contract instance has a set provider\n  checkProvider(_ref) {\n    let {\n      currentProvider,\n      contractName\n    } = _ref;\n    if (!currentProvider) throw new Error(`${contractName} error: Please call setProvider() first before calling new().`);\n  },\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch(_ref2) {\n    let {\n      networks,\n      network_id,\n      contractName\n    } = _ref2;\n    if (networks[network_id] == null) throw new Error(`${contractName} has not been deployed to detected network (network/artifact mismatch)`);\n  },\n  // verifies contract instance has been deployed\n  checkDeployment(_ref3) {\n    let {\n      isDeployed,\n      contractName,\n      network_id\n    } = _ref3;\n    if (!isDeployed()) throw new Error(`${contractName} has not been deployed to detected network (${network_id})`);\n  },\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\") throw new Error(`Cannot create instance of ${contractName}; no code at address ${address}`);\n  },\n  // parses known contract instance networks\n  async parseKnownNetworks(_ref4, gasLimit) {\n    let {\n      networks,\n      currentProvider,\n      setNetwork,\n      network_id\n    } = _ref4;\n    if (!networks && Object.keys(networks).length === 0) {\n      return false;\n    }\n    // go through all the networks that are listed as\n    // blockchain uris and see if they match\n    for (const network in networks) {\n      if (network.startsWith(\"blockchain://\")) {\n        const networkMatches = await BlockchainUtils.matches(network, currentProvider);\n        if (networkMatches) {\n          setNetwork(network);\n          return {\n            id: network_id,\n            blockLimit: gasLimit\n          };\n        }\n      }\n    }\n    // no match found!\n    return false;\n  },\n  // sets a contract instance network ID\n  async setInstanceNetworkID(TruffleContractInstance, chainNetworkID, gasLimit) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(TruffleContractInstance, gasLimit);\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return {\n      id: TruffleContractInstance.network_id,\n      blockLimit: gasLimit\n    };\n  }\n};\nUtils.ens = ens;\nUtils.bigNumberify = bigNumberify;\nmodule.exports = Utils;","map":{"version":3,"names":["debug","require","web3Utils","bigNumberify","abi","BlockchainUtils","reformat","ens","allowedTxParams","Set","Utils","is_object","val","Array","isArray","is_big_number","isBN","isBigNumber","isTxParams","Object","keys","some","fieldName","has","decodeLogs","_logs","isSingle","constructor","logs","toTruffleLog","map","log","logABI","events","topics","copy","merge","event","name","anonymous","slice","data","logArgs","decodeLog","inputs","args","numbers","call","_","filter","temp","push","raw","forEach","merged","prototype","arguments","i","length","object","j","key","value","linkBytecode","bytecode","links","library_name","library_address","regex","RegExp","replace","getTxParams","methodABI","ignoreDefaultGasPriceParams","undefined","expectedArgCount","txParams","lastArg","pop","defaultParams","class_defaults","gasPrice","maxFeePerGas","maxPriorityFeePerGas","checkLibraries","unlinkedLibraries","binary","match","sort","index","arr","join","error","contractName","Error","convertToEthersBN","original","converted","item","stringValue","toFixed","toString","ethersBN","multiplyBigNumberByDecimal","bignum","decimal","maxPrecision","significantFigures","Math","min","denominator","pow","multiplier","round","numerator","mul","div","checkProvider","_ref","currentProvider","checkNetworkArtifactMatch","_ref2","networks","network_id","checkDeployment","_ref3","isDeployed","checkCode","onChainCode","address","parseKnownNetworks","_ref4","gasLimit","setNetwork","network","startsWith","networkMatches","matches","id","blockLimit","setInstanceNetworkID","TruffleContractInstance","chainNetworkID","hasNetwork","matchedNetwork","module","exports"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/contract/lib/utils/index.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:utils\");\nconst web3Utils = require(\"web3-utils\");\nconst { bigNumberify } = require(\"ethers/utils/bignumber\");\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"../reformat\");\nconst ens = require(\"./ens\");\n\nconst allowedTxParams = new Set([\n  \"from\",\n  \"to\",\n  \"gas\",\n  \"gasPrice\",\n  \"maxFeePerGas\",\n  \"maxPriorityFeePerGas\",\n  \"value\",\n  \"data\",\n  \"nonce\",\n  \"accessList\",\n  \"type\",\n  \"privateFor\",\n  \"overwrite\"\n]);\n\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n\n    //NOTE: For some reason, contrary to the docs,\n    //web3Utils.isBigNumber returns true not only for\n    //bignumber.js BigNumbers, but also for ethers BigNumbers,\n    //even though these are totally different things.\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  isTxParams(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    return Object.keys(val).some(fieldName => allowedTxParams.has(fieldName));\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n\n    return logs\n      .map(log => {\n        const logABI = constructor.events[log.topics[0]];\n\n        if (logABI == null) return null;\n\n        const copy = Utils.merge({}, log);\n\n        copy.event = logABI.name;\n        copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n\n        if (copy.data === \"0x\") copy.data = \"\";\n\n        let logArgs;\n        try {\n          logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n          copy.args = reformat.numbers.call(\n            constructor,\n            logArgs,\n            logABI.inputs\n          );\n        } catch (_) {\n          return null;\n        }\n\n        delete copy.data;\n        delete copy.topics;\n\n        return copy;\n      })\n      .filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args, ignoreDefaultGasPriceParams = false) {\n    const constructor = this;\n\n    const expectedArgCount = methodABI ? methodABI.inputs.length : 0;\n\n    let txParams = {};\n    const lastArg = args[args.length - 1];\n\n    if (args.length === expectedArgCount + 1 && Utils.isTxParams(lastArg)) {\n      txParams = args.pop();\n    }\n\n    let defaultParams = constructor.class_defaults;\n    if (ignoreDefaultGasPriceParams) {\n      //this parameter is set when making calls (as opposed to transactions)\n      //gas price params can cause problems with those on some networks, so\n      //we ignore any defaults, and only include them if they were explicitly\n      //specified\n      defaultParams = { ...constructor.class_defaults }; //clone\n      delete defaultParams.gasPrice;\n      delete defaultParams.maxFeePerGas;\n      delete defaultParams.maxPriorityFeePerGas;\n    }\n\n    return Utils.merge(defaultParams, txParams);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinkedLibraries = constructor.binary.match(regex);\n\n    if (unlinkedLibraries !== null) {\n      unlinkedLibraries = unlinkedLibraries\n        .map(\n          (\n            name // Remove underscores\n          ) => name.replace(/_/g, \"\")\n        )\n        .sort()\n        .filter((name, index, arr) => {\n          // Remove duplicates\n          if (index + 1 >= arr.length) {\n            return true;\n          }\n\n          return name !== arr[index + 1];\n        })\n        .join(\", \");\n\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinkedLibraries}`;\n\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        //HACK: Since we can't rely on web3Utils.isBigNumber to tell\n        //whether we have a bignumber.js BigNumber, we'll just check\n        //whether it has the toFixed method\n        const stringValue = item.toFixed\n          ? item.toFixed() //prevents use of scientific notation\n          : item.toString();\n        const ethersBN = bigNumberify(stringValue);\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of significant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(\n      decimal.toString().length - 1, // length less one because `.`\n      maxPrecision\n    );\n\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const multiplier = Math.round(decimal * denominator);\n    const numerator = bigNumberify(multiplier).mul(bignum);\n\n    return numerator.div(denominator);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider({ currentProvider, contractName }) {\n    if (!currentProvider)\n      throw new Error(\n        `${contractName} error: Please call setProvider() first before calling new().`\n      );\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch({ networks, network_id, contractName }) {\n    if (networks[network_id] == null)\n      throw new Error(\n        `${contractName} has not been deployed to detected network (network/artifact mismatch)`\n      );\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment({ isDeployed, contractName, network_id }) {\n    if (!isDeployed())\n      throw new Error(\n        `${contractName} has not been deployed to detected network (${network_id})`\n      );\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\")\n      throw new Error(\n        `Cannot create instance of ${contractName}; no code at address ${address}`\n      );\n  },\n\n  // parses known contract instance networks\n  async parseKnownNetworks(\n    { networks, currentProvider, setNetwork, network_id },\n    gasLimit\n  ) {\n    if (!networks && Object.keys(networks).length === 0) {\n      return false;\n    }\n    // go through all the networks that are listed as\n    // blockchain uris and see if they match\n    for (const network in networks) {\n      if (network.startsWith(\"blockchain://\")) {\n        const networkMatches = await BlockchainUtils.matches(\n          network,\n          currentProvider\n        );\n        if (networkMatches) {\n          setNetwork(network);\n          return {\n            id: network_id,\n            blockLimit: gasLimit\n          };\n        }\n      }\n    }\n    // no match found!\n    return false;\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(\n    TruffleContractInstance,\n    chainNetworkID,\n    gasLimit\n  ) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(\n      TruffleContractInstance,\n      gasLimit\n    );\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return { id: TruffleContractInstance.network_id, blockLimit: gasLimit };\n  }\n};\n\nUtils.ens = ens;\nUtils.bigNumberify = bigNumberify;\n\nmodule.exports = Utils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}