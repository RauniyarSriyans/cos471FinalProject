{"ast":null,"code":"\"use strict\";\n\nconst Blockchain = {\n  getBlockByNumber(blockNumber, provider, callback) {\n    const params = [blockNumber, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByNumber\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n  getBlockByHash(blockHash, provider, callback) {\n    const params = [blockHash, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByHash\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n  parse(uri) {\n    const parsed = {};\n    if (uri.indexOf(\"blockchain://\") !== 0) return parsed;\n    const cleanUri = uri.replace(\"blockchain://\", \"\");\n    const pieces = cleanUri.split(\"/block/\");\n    parsed.genesis_hash = `0x${pieces[0]}`;\n    parsed.block_hash = `0x${pieces[1]}`;\n    return parsed;\n  },\n  asURI(provider) {\n    return new Promise((resolve, reject) => {\n      let genesis, latest;\n      this.getBlockByNumber(\"0x0\", provider, (err, _ref) => {\n        let {\n          result\n        } = _ref;\n        if (err) return reject(err);\n        genesis = result;\n        this.getBlockByNumber(\"latest\", provider, (err, _ref2) => {\n          let {\n            result\n          } = _ref2;\n          if (err) return reject(err);\n          latest = result;\n          const url = `blockchain://${genesis.hash.replace(\"0x\", \"\")}/block/${latest.hash.replace(\"0x\", \"\")}`;\n          resolve(url);\n        });\n      });\n    });\n  },\n  matches(uri, provider) {\n    return new Promise((resolve, reject) => {\n      const parsedUri = this.parse(uri);\n      const expectedGenesis = parsedUri.genesis_hash;\n      const expectedBlock = parsedUri.block_hash;\n      this.getBlockByNumber(\"0x0\", provider, (err, _ref3) => {\n        let {\n          result\n        } = _ref3;\n        if (err) return reject(err);\n        const block = result;\n        if (block.hash !== expectedGenesis) return resolve(false);\n        this.getBlockByHash(expectedBlock, provider, (err, _ref4) => {\n          let {\n            result\n          } = _ref4;\n          // Treat an error as if the block didn't exist. This is because\n          // some clients respond differently.\n          const block = result;\n          if (err || block == null) {\n            return resolve(false);\n          }\n          resolve(true);\n        });\n      });\n    });\n  }\n};\nmodule.exports = Blockchain;","map":{"version":3,"names":["Blockchain","getBlockByNumber","blockNumber","provider","callback","params","send","jsonrpc","method","id","Date","now","getBlockByHash","blockHash","parse","uri","parsed","indexOf","cleanUri","replace","pieces","split","genesis_hash","block_hash","asURI","Promise","resolve","reject","genesis","latest","err","_ref","result","_ref2","url","hash","matches","parsedUri","expectedGenesis","expectedBlock","_ref3","block","_ref4","module","exports"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/contract/node_modules/@truffle/blockchain-utils/index.ts"],"sourcesContent":["import type { Provider, Callback, JsonRPCResponse } from \"web3/providers\";\nimport type { parsedUriObject } from \"typings\";\n\nconst Blockchain = {\n  getBlockByNumber(\n    blockNumber: string,\n    provider: Provider,\n    callback: Callback<JsonRPCResponse>\n  ) {\n    const params = [blockNumber, true];\n    provider.send(\n      {\n        jsonrpc: \"2.0\",\n        method: \"eth_getBlockByNumber\",\n        params,\n        id: Date.now()\n      },\n      callback\n    );\n  },\n\n  getBlockByHash(\n    blockHash: string,\n    provider: Provider,\n    callback: Callback<JsonRPCResponse>\n  ) {\n    const params = [blockHash, true];\n    provider.send(\n      {\n        jsonrpc: \"2.0\",\n        method: \"eth_getBlockByHash\",\n        params,\n        id: Date.now()\n      },\n      callback\n    );\n  },\n\n  parse(uri: string) {\n    const parsed: parsedUriObject = {};\n    if (uri.indexOf(\"blockchain://\") !== 0) return parsed;\n\n    const cleanUri = uri.replace(\"blockchain://\", \"\");\n\n    const pieces = cleanUri.split(\"/block/\");\n\n    parsed.genesis_hash = `0x${pieces[0]}`;\n    parsed.block_hash = `0x${pieces[1]}`;\n\n    return parsed;\n  },\n\n  asURI(provider: Provider) {\n    return new Promise((resolve, reject) => {\n      let genesis: any, latest;\n\n      this.getBlockByNumber(\n        \"0x0\",\n        provider,\n        (err: Error, { result }: JsonRPCResponse) => {\n          if (err) return reject(err);\n          genesis = result;\n\n          this.getBlockByNumber(\n            \"latest\",\n            provider,\n            (err: Error, { result }: JsonRPCResponse) => {\n              if (err) return reject(err);\n              latest = result;\n              const url = `blockchain://${genesis.hash.replace(\n                \"0x\",\n                \"\"\n              )}/block/${latest.hash.replace(\"0x\", \"\")}`;\n              resolve(url);\n            }\n          );\n        }\n      );\n    });\n  },\n\n  matches(uri: string, provider: Provider) {\n    return new Promise((resolve, reject) => {\n      const parsedUri = this.parse(uri);\n\n      const expectedGenesis = parsedUri.genesis_hash;\n      const expectedBlock = parsedUri.block_hash;\n\n      this.getBlockByNumber(\n        \"0x0\",\n        provider,\n        (err: Error, { result }: JsonRPCResponse) => {\n          if (err) return reject(err);\n          const block = result;\n          if (block.hash !== expectedGenesis) return resolve(false);\n\n          this.getBlockByHash(\n            expectedBlock,\n            provider,\n            (err: Error, { result }: JsonRPCResponse) => {\n              // Treat an error as if the block didn't exist. This is because\n              // some clients respond differently.\n              const block = result;\n              if (err || block == null) {\n                return resolve(false);\n              }\n\n              resolve(true);\n            }\n          );\n        }\n      );\n    });\n  }\n};\n\nexport = Blockchain;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}