{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectSources = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * Collects sources, targets into collections with OS-independent paths,\n * along with a reverse mapping to the original path (for post-processing)\n *\n * @param originalSources - { [originalSourcePath]: contents }\n * @param originalTargets - originalSourcePath[]\n * @param baseDirectory - a directory to remove as a prefix\n * @param replacement - what to replace it with\n * @return { sources, targets, originalSourcePaths }\n */\nfunction collectSources(originalSources) {\n  let originalTargets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let baseDirectory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let replacement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"/\";\n  const mappedResults = Object.entries(originalSources).filter(_ref => {\n    let [originalSourcePath, _] = _ref;\n    return !path.isAbsolute(originalSourcePath) || originalSourcePath.startsWith(baseDirectory);\n  }).map(_ref2 => {\n    let [originalSourcePath, contents] = _ref2;\n    return {\n      originalSourcePath,\n      contents,\n      sourcePath: getPortableSourcePath(replaceRootDirectory(originalSourcePath, baseDirectory, replacement))\n    };\n  }).map(_ref3 => {\n    let {\n      originalSourcePath,\n      sourcePath,\n      contents\n    } = _ref3;\n    return {\n      sources: {\n        [sourcePath]: contents\n      },\n      // include transformed form as target if original is a target\n      targets: originalTargets.includes(originalSourcePath) ? [sourcePath] : [],\n      originalSourcePaths: {\n        [sourcePath]: originalSourcePath\n      }\n    };\n  });\n  const defaultAccumulator = {\n    sources: {},\n    targets: [],\n    originalSourcePaths: {}\n  };\n  return mappedResults.reduce((accumulator, result) => ({\n    sources: Object.assign({}, accumulator.sources, result.sources),\n    targets: [...accumulator.targets, ...result.targets],\n    originalSourcePaths: Object.assign({}, accumulator.originalSourcePaths, result.originalSourcePaths)\n  }), defaultAccumulator);\n}\nexports.collectSources = collectSources;\n/**\n * @param sourcePath - string\n * @return string - operating system independent path\n * @private\n */\nfunction getPortableSourcePath(sourcePath) {\n  let replacement = sourcePath;\n  //on Windows, replace backslashes with forward slashes\n  if (path.sep === \"\\\\\") {\n    replacement = sourcePath.replace(/\\\\/g, \"/\");\n  }\n  // Turn G:/.../ into /G/.../ for Windows\n  if (replacement.length >= 2 && replacement[1] === \":\") {\n    replacement = \"/\" + replacement;\n    replacement = replacement.replace(\":\", \"\");\n  }\n  return replacement;\n}\nfunction replaceRootDirectory(sourcePath, rootDirectory, replacement) {\n  //make sure root directory ends in a separator\n  if (!rootDirectory.endsWith(path.sep)) {\n    rootDirectory = rootDirectory + path.sep;\n  }\n  return sourcePath.startsWith(rootDirectory) ? replacement + sourcePath.slice(rootDirectory.length) //remove prefix\n  : sourcePath;\n}","map":{"version":3,"names":["path","__importStar","require","collectSources","originalSources","originalTargets","arguments","length","undefined","baseDirectory","replacement","mappedResults","Object","entries","filter","_ref","originalSourcePath","_","isAbsolute","startsWith","map","_ref2","contents","sourcePath","getPortableSourcePath","replaceRootDirectory","_ref3","sources","targets","includes","originalSourcePaths","defaultAccumulator","reduce","accumulator","result","assign","exports","sep","replace","rootDirectory","endsWith","slice"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/compile-common/src/sources.ts"],"sourcesContent":["import * as path from \"path\";\n\n//source content by path\nexport interface Sources {\n  [sourcePath: string]: string;\n}\n\n//original paths by transformed path\nexport interface PathMapping {\n  [sourcePath: string]: string;\n}\n\nexport interface CollectedSources {\n  sources: Sources;\n  targets: string[];\n  originalSourcePaths: PathMapping;\n}\n\n/**\n * Collects sources, targets into collections with OS-independent paths,\n * along with a reverse mapping to the original path (for post-processing)\n *\n * @param originalSources - { [originalSourcePath]: contents }\n * @param originalTargets - originalSourcePath[]\n * @param baseDirectory - a directory to remove as a prefix\n * @param replacement - what to replace it with\n * @return { sources, targets, originalSourcePaths }\n */\nexport function collectSources(\n  originalSources: Sources,\n  originalTargets: string[] = [],\n  baseDirectory: string = \"\",\n  replacement: string = \"/\"\n): CollectedSources {\n  const mappedResults = Object.entries(originalSources)\n    .filter(\n      ([originalSourcePath, _]) =>\n        !path.isAbsolute(originalSourcePath) ||\n        originalSourcePath.startsWith(baseDirectory)\n    )\n    .map(([originalSourcePath, contents]) => ({\n      originalSourcePath,\n      contents,\n      sourcePath: getPortableSourcePath(\n        replaceRootDirectory(originalSourcePath, baseDirectory, replacement)\n      )\n    }))\n    .map(({ originalSourcePath, sourcePath, contents }) => ({\n      sources: {\n        [sourcePath]: contents\n      },\n\n      // include transformed form as target if original is a target\n      targets: originalTargets.includes(originalSourcePath) ? [sourcePath] : [],\n\n      originalSourcePaths: {\n        [sourcePath]: originalSourcePath\n      }\n    }));\n\n  const defaultAccumulator = {\n    sources: {},\n    targets: [] as string[],\n    originalSourcePaths: {}\n  };\n\n  return mappedResults.reduce(\n    (accumulator, result) => ({\n      sources: Object.assign({}, accumulator.sources, result.sources),\n      targets: [...accumulator.targets, ...result.targets],\n      originalSourcePaths: Object.assign(\n        {},\n        accumulator.originalSourcePaths,\n        result.originalSourcePaths\n      )\n    }),\n    defaultAccumulator\n  );\n}\n\n/**\n * @param sourcePath - string\n * @return string - operating system independent path\n * @private\n */\nfunction getPortableSourcePath(sourcePath: string): string {\n  let replacement = sourcePath;\n  //on Windows, replace backslashes with forward slashes\n  if (path.sep === \"\\\\\") {\n    replacement = sourcePath.replace(/\\\\/g, \"/\");\n  }\n\n  // Turn G:/.../ into /G/.../ for Windows\n  if (replacement.length >= 2 && replacement[1] === \":\") {\n    replacement = \"/\" + replacement;\n    replacement = replacement.replace(\":\", \"\");\n  }\n\n  return replacement;\n}\n\nfunction replaceRootDirectory(\n  sourcePath: string,\n  rootDirectory: string,\n  replacement: string\n): string {\n  //make sure root directory ends in a separator\n  if (!rootDirectory.endsWith(path.sep)) {\n    rootDirectory = rootDirectory + path.sep;\n  }\n  return sourcePath.startsWith(rootDirectory)\n    ? replacement + sourcePath.slice(rootDirectory.length) //remove prefix\n    : sourcePath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}