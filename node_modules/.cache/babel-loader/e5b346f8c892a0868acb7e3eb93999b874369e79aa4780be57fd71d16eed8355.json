{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatFunctionLike = exports.ReturndataDecodingInspector = exports.LogDecodingInspector = exports.containsDeliberateReadError = exports.CalldataDecodingInspector = exports.nativizeEventArgs = exports.nativizeReturn = exports.nativize = exports.nativizeAccessList = exports.unsafeNativizeVariables = exports.unsafeNativize = exports.ResultInspector = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:export\");\nconst os_1 = __importDefault(require(\"os\"));\nconst util_1 = __importDefault(require(\"util\"));\nconst Format = __importStar(require(\"./format\"));\nconst Conversion = __importStar(require(\"./conversion\"));\nconst inspect_1 = require(\"./format/utils/inspect\");\nObject.defineProperty(exports, \"ResultInspector\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.ResultInspector;\n  }\n});\nObject.defineProperty(exports, \"unsafeNativize\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.unsafeNativize;\n  }\n});\nObject.defineProperty(exports, \"unsafeNativizeVariables\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.unsafeNativizeVariables;\n  }\n});\nObject.defineProperty(exports, \"nativizeAccessList\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.nativizeAccessList;\n  }\n});\n/**\n * This function is similar to\n * [[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\n * be safe, and also allows for different output formats.  The only currently\n * supported format is \"ethers\", which is intended to match the way that\n * Truffle Contract currently returns values (based on the Ethers decoder).  As\n * such, it only handles ABI types, and in addition does not handle the types\n * fixed, ufixed, or function.  Note that in these cases it returns `undefined`\n * rather than throwing, as we want this function to be used in contexts where\n * it had better not throw.  It also does not handle circularities, for similar\n * reasons.\n *\n * To handle numeric types, this function takes an optional numberFormatter\n * option that tells it how to handle numbers; this function should take a\n * BigInt as input.  By default, this function will be the identity, and so\n * numbers will be represented as BigInts.\n *\n * Note that this function begins by calling abify, so out-of-range enums (that\n * aren't so out-of-range as to be padding errors) will not return `undefined`.\n * Out-of-range booleans similarly will return true rather than `undefined`.\n * However, other range errors may return `undefined`; this may technically be a\n * slight incompatibility with existing behavior, but should not be relevant\n * except in quite unusual cases.\n *\n * In order to match the behavior for tuples, tuples will be transformed into\n * arrays, but named entries will additionally be keyed by name.  Moreover,\n * indexed variables of reference type will be nativized to an undecoded hex\n * string.\n */\nfunction nativize(result) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const numberFormatter = options.numberFormatter || (x => x);\n  const format = options.format || \"ethers\";\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativize(result, numberFormatter);\n  }\n}\nexports.nativize = nativize;\nfunction ethersCompatibleNativize(result) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  //note: the original version of this function began by calling abify,\n  //but we don't do that here because abify requires a userDefinedTypes\n  //parameter and we don't want that.\n  //However, it only needs that to handle getting the types right.  Since\n  //we don't care about that here, we instead do away with abify and handle\n  //such matters ourselves (which is less convenient, yeah).\n  switch (result.kind) {\n    case \"error\":\n      switch (result.error.kind) {\n        case \"IndexedReferenceTypeError\":\n          //strictly speaking for arrays ethers will fail to decode\n          //rather than do this, but, eh\n          return result.error.raw;\n        case \"EnumOutOfRangeError\":\n          return numberFormatter(Conversion.toBigInt(result.error.rawAsBN));\n        default:\n          return undefined;\n      }\n    case \"value\":\n      switch (result.type.typeClass) {\n        case \"uint\":\n        case \"int\":\n          const asBN = result.value.asBN;\n          return numberFormatter(Conversion.toBigInt(asBN));\n        case \"enum\":\n          const numericAsBN = result.value.numericAsBN;\n          return numberFormatter(Conversion.toBigInt(numericAsBN));\n        case \"bool\":\n          return result.value.asBoolean;\n        case \"bytes\":\n          const asHex = result.value.asHex;\n          return asHex !== \"0x\" ? asHex : null;\n        case \"address\":\n          return result.value.asAddress;\n        case \"contract\":\n          return result.value.address;\n        case \"string\":\n          {\n            const coercedResult = result;\n            switch (coercedResult.value.kind) {\n              case \"valid\":\n                return coercedResult.value.asString;\n              case \"malformed\":\n                // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)\n                // note we need to cut off the 0x prefix\n                return Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString();\n            }\n          }\n        case \"userDefinedValueType\":\n          return ethersCompatibleNativize(result.value, numberFormatter);\n        case \"array\":\n          return result.value.map(value => ethersCompatibleNativize(value, numberFormatter));\n        case \"tuple\":\n        case \"struct\":\n          //in this case, we need the result to be an array, but also\n          //to have the field names (where extant) as keys\n          const nativized = [];\n          const pairs = result.value;\n          for (const {\n            name,\n            value\n          } of pairs) {\n            const nativizedValue = ethersCompatibleNativize(value, numberFormatter);\n            nativized.push(nativizedValue);\n            if (name) {\n              nativized[name] = nativizedValue;\n            }\n          }\n          return nativized;\n        case \"function\":\n          switch (result.type.visibility) {\n            case \"external\":\n              const coercedResult = result;\n              //ethers per se doesn't handle this, but web3's hacked version will\n              //sometimes decode these as just a bytes24, so let's do that\n              return coercedResult.value.contract.address.toLowerCase() + coercedResult.value.selector.slice(2);\n            case \"internal\":\n              return undefined;\n          }\n        case \"fixed\":\n        case \"ufixed\":\n        default:\n          return undefined;\n      }\n  }\n}\n/**\n * This function is similar to [[nativize]], but takes\n * a [[ReturndataDecoding]].  If there's only one returned value, it\n * will be run through compatibleNativize but otherwise unaltered;\n * otherwise the results will be put in an object.\n *\n * Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\n * this will just return `undefined`.\n */\nfunction nativizeReturn(decoding) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const numberFormatter = options.numberFormatter || (x => x);\n  const format = options.format || \"ethers\";\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativizeReturn(decoding, numberFormatter);\n  }\n}\nexports.nativizeReturn = nativizeReturn;\nfunction ethersCompatibleNativizeReturn(decoding) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  if (decoding.kind !== \"return\") {\n    return undefined;\n  }\n  if (decoding.arguments.length === 1) {\n    return ethersCompatibleNativize(decoding.arguments[0].value, numberFormatter);\n  }\n  const result = {};\n  for (let i = 0; i < decoding.arguments.length; i++) {\n    const {\n      name,\n      value\n    } = decoding.arguments[i];\n    const nativized = ethersCompatibleNativize(value, numberFormatter);\n    result[i] = nativized;\n    if (name) {\n      result[name] = nativized;\n    }\n  }\n  return result;\n}\n/**\n * This function is similar to [[compatibleNativize]], but takes\n * a [[LogDecoding]], and puts the results in an object.  Note\n * that this does not return the entire event info, but just the\n * `args` for the event.\n */\nfunction nativizeEventArgs(decoding) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const numberFormatter = options.numberFormatter || (x => x);\n  const format = options.format || \"ethers\";\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativizeEventArgs(decoding, numberFormatter);\n  }\n}\nexports.nativizeEventArgs = nativizeEventArgs;\nfunction ethersCompatibleNativizeEventArgs(decoding) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  const result = {};\n  for (let i = 0; i < decoding.arguments.length; i++) {\n    const {\n      name,\n      value\n    } = decoding.arguments[i];\n    const nativized = ethersCompatibleNativize(value, numberFormatter);\n    result[i] = nativized;\n    if (name) {\n      result[name] = nativized;\n    }\n  }\n  //note: if you have an argument named __length__, what ethers\n  //actually does is... weird.  we're just going to do this instead,\n  //which is simpler and probably more useful, even if it's not strictly\n  //the same (I *seriously* doubt anyone was relying on the old behavior,\n  //because it's, uh, not very useful)\n  result.__length__ = decoding.arguments.length;\n  return result;\n}\n/**\n * Similar to [[ResultInspector]], but for a [[CalldataDecoding]].\n * See [[ResultInspector]] for more information.\n */\nclass CalldataDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n  [util_1.default.inspect.custom](depth, options) {\n    switch (this.decoding.kind) {\n      case \"function\":\n        const fullName = `${this.decoding.class.typeName}.${this.decoding.abi.name}`;\n        if (this.decoding.interpretations.multicall) {\n          return formatMulticall(fullName, this.decoding.interpretations.multicall, options);\n        } else if (this.decoding.interpretations.aggregate) {\n          return formatAggregate(fullName, this.decoding.interpretations.aggregate, options);\n        } else if (this.decoding.interpretations.tryAggregate) {\n          const {\n            requireSuccess,\n            calls\n          } = this.decoding.interpretations.tryAggregate;\n          return formatAggregate(fullName, calls, options, \"requireSuccess\", options.stylize(requireSuccess.toString(), \"number\"));\n        } else if (this.decoding.interpretations.deadlinedMulticall) {\n          const {\n            deadline,\n            calls: decodings\n          } = this.decoding.interpretations.deadlinedMulticall;\n          return formatMulticall(fullName, decodings, options, \"deadline\", options.stylize(deadline.toString(), \"number\"));\n        } else if (this.decoding.interpretations.specifiedBlockhashMulticall) {\n          const {\n            specifiedBlockhash,\n            calls: decodings\n          } = this.decoding.interpretations.specifiedBlockhashMulticall;\n          return formatMulticall(fullName, decodings, options, \"previousBlockhash\", options.stylize(specifiedBlockhash, \"number\"));\n        }\n        return formatFunctionLike(fullName, this.decoding.arguments, options);\n      case \"constructor\":\n        return formatFunctionLike(`new ${this.decoding.class.typeName}`, this.decoding.arguments, options);\n      case \"message\":\n        const {\n          data,\n          abi\n        } = this.decoding;\n        //we'll set up a value and inspect that :)\n        const codecValue = {\n          kind: \"value\",\n          type: {\n            typeClass: \"bytes\",\n            kind: \"dynamic\"\n          },\n          value: {\n            asHex: data\n          }\n        };\n        if (abi) {\n          return formatFunctionLike(`${this.decoding.class.typeName}.${abi.type}`, [{\n            value: codecValue\n          }], options, true // we don't need to see the type here!\n          );\n        } else {\n          return `Sent raw data to ${this.decoding.class.typeName}: ${util_1.default.inspect(new inspect_1.ResultInspector(codecValue), options)}`;\n        }\n      case \"unknown\":\n        return \"Receiving contract could not be identified.\";\n      case \"create\":\n        return \"Created contract could not be identified.\";\n    }\n  }\n}\nexports.CalldataDecodingInspector = CalldataDecodingInspector;\nfunction containsDeliberateReadError(result) {\n  switch (result.kind) {\n    case \"value\":\n      switch (result.type.typeClass) {\n        case \"struct\":\n          //this is currently only intended for use with storage variables, so I\n          //won't bother with handling tuple, magic, options\n          return result.value.some(_ref => {\n            let {\n              value\n            } = _ref;\n            return containsDeliberateReadError(value);\n          });\n        case \"array\":\n          return result.value.some(containsDeliberateReadError);\n        case \"mapping\":\n          return result.value.some(_ref2 => {\n            let {\n              value\n            } = _ref2;\n            return containsDeliberateReadError(value);\n          });\n        default:\n          return false;\n      }\n    case \"error\":\n      switch (result.error.kind) {\n        case \"StorageNotSuppliedError\":\n        case \"CodeNotSuppliedError\":\n          return true;\n        default:\n          return false;\n      }\n  }\n}\nexports.containsDeliberateReadError = containsDeliberateReadError;\n/**\n * Similar to [[ResultInspector]], but for a [[LogDecoding]].\n * See [[ResultInspector]] for more information.\n */\nclass LogDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n  [util_1.default.inspect.custom](depth, options) {\n    const className = this.decoding.definedIn ? this.decoding.definedIn.typeName : this.decoding.class.typeName;\n    const eventName = this.decoding.abi.name;\n    const fullName = `${className}.${eventName}`;\n    switch (this.decoding.kind) {\n      case \"event\":\n        return formatFunctionLike(fullName, this.decoding.arguments, options);\n      case \"anonymous\":\n        return formatFunctionLike(`<anonymous> ${fullName}`, this.decoding.arguments, options);\n    }\n  }\n}\nexports.LogDecodingInspector = LogDecodingInspector;\n/**\n * Similar to [[ResultInspector]], but for a [[ReturndataDecoding]].\n * See [[ResultInspector]] for more information.\n */\nclass ReturndataDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n  [util_1.default.inspect.custom](depth, options) {\n    switch (this.decoding.kind) {\n      case \"return\":\n        return formatFunctionLike(\"Returned values: \", this.decoding.arguments, options);\n      case \"returnmessage\":\n        const {\n          data\n        } = this.decoding;\n        //we'll just set up a value and inspect that :)\n        const codecValue = {\n          kind: \"value\",\n          type: {\n            typeClass: \"bytes\",\n            kind: \"dynamic\"\n          },\n          value: {\n            asHex: data\n          }\n        };\n        const dataString = util_1.default.inspect(new inspect_1.ResultInspector(codecValue), options);\n        return `Returned raw data: ${dataString}`;\n      case \"selfdestruct\":\n        return \"The contract self-destructed.\";\n      case \"failure\":\n        return \"The transaction reverted without a message.\";\n      case \"revert\":\n        const name = this.decoding.definedIn ? `${this.decoding.definedIn.typeName}.${this.decoding.abi.name}` : this.decoding.abi.name;\n        return formatFunctionLike(`Error thrown:${os_1.default.EOL}${name}`, this.decoding.arguments, options);\n      case \"bytecode\":\n        //this one gets custom handling :P\n        const contractKind = this.decoding.class.contractKind || \"contract\";\n        const firstLine = this.decoding.address !== undefined ? `Returned bytecode for a ${contractKind} ${this.decoding.class.typeName} at ${this.decoding.address}.` : `Returned bytecode for a ${contractKind} ${this.decoding.class.typeName}.`;\n        if (this.decoding.immutables && this.decoding.immutables.length > 0) {\n          const prefixes = this.decoding.immutables.map(_ref3 => {\n            let {\n              name,\n              class: {\n                typeName\n              }\n            } = _ref3;\n            return `${typeName}.${name}: `;\n          });\n          const maxLength = Math.max(...prefixes.map(prefix => prefix.length));\n          const paddedPrefixes = prefixes.map(prefix => prefix.padStart(maxLength));\n          const formattedValues = this.decoding.immutables.map((value, index) => {\n            const prefix = paddedPrefixes[index];\n            const formatted = indentExcludingFirstLine(util_1.default.inspect(new inspect_1.ResultInspector(value.value), options), maxLength);\n            return prefix + formatted;\n          });\n          return `Immutable values:${os_1.default.EOL}${formattedValues.join(os_1.default.EOL)}`;\n        } else {\n          return firstLine;\n        }\n      case \"unknownbytecode\":\n        return \"Bytecode was returned, but it could not be identified.\";\n    }\n  }\n}\nexports.ReturndataDecodingInspector = ReturndataDecodingInspector;\n//copied from TestRunner, but simplified for our purposes :)\nfunction indentArray(input, indentation) {\n  return input.map(line => \" \".repeat(indentation) + line);\n}\nfunction indentExcludingFirstLine(input, indentation) {\n  const lines = input.split(/\\r?\\n/);\n  return [lines[0], ...indentArray(lines.slice(1), indentation)].join(os_1.default.EOL);\n}\nfunction indentMiddleLines(input, indentation) {\n  const lines = input.split(/\\r?\\n/);\n  if (lines.length < 2) {\n    return input;\n  }\n  return [lines[0], ...indentArray(lines.slice(1, -1), indentation), lines[lines.length - 1]].join(os_1.default.EOL);\n}\n//used for formatting things that look like function calls:\n//events (including anonymous events), identifiable transactions,\n//and revert messages\n//\"header\" param should include everything before the initial parenthesis\n/**\n * @hidden\n */\nfunction formatFunctionLike(header, values, options) {\n  let suppressType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let indent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n  if (values.length === 0) {\n    return `${header}()`;\n  }\n  let formattedValues = values.map((_ref4, index) => {\n    let {\n      name,\n      indexed,\n      value\n    } = _ref4;\n    const namePrefix = name ? `${name}: ` : \"\";\n    const indexedPrefix = indexed ? \"<indexed> \" : \"\";\n    const prefix = namePrefix + indexedPrefix;\n    const displayValue = util_1.default.inspect(new inspect_1.ResultInspector(value), options);\n    const typeString = suppressType ? \"\" : ` (type: ${Format.Types.typeStringWithoutLocation(value.type)})`;\n    return indentMiddleLines(prefix + displayValue + typeString + (index < values.length - 1 ? \",\" : \"\"), indent);\n  });\n  return indentMiddleLines(`${header}(${os_1.default.EOL}${formattedValues.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}\nexports.formatFunctionLike = formatFunctionLike;\nfunction formatMulticall(fullName, decodings, options, additionalParameterName, additionalParameterValue) {\n  if (decodings.length === 0) {\n    return `${fullName}()`;\n  }\n  const indent = 2;\n  let formattedDecodings = decodings.map((decoding, index) => {\n    const formattedDecoding = decoding === null ? \"<decoding error>\" : util_1.default.inspect(new CalldataDecodingInspector(decoding), options);\n    return formattedDecoding + (index < decodings.length - 1 ? \",\" : \"\");\n  });\n  if (additionalParameterName) {\n    formattedDecodings.unshift(`${additionalParameterName}: ${additionalParameterValue},`);\n  }\n  return indentMiddleLines(`${fullName}(${os_1.default.EOL}${formattedDecodings.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}\nfunction formatAggregate(fullName, calls, options, additionalParameterName, additionalParameterValue) {\n  if (calls.length === 0) {\n    return `${fullName}()`;\n  }\n  const indent = 2;\n  let formattedCalls = calls.map((_ref5, index) => {\n    let {\n      address,\n      decoding\n    } = _ref5;\n    const formattedCall = decoding === null ? \"<decoding error>\" : util_1.default.inspect(new CalldataDecodingInspector(decoding), options).replace(\".\", `(${options.stylize(address, \"number\")}).`); //HACK: splice in the address\n    return formattedCall + (index < calls.length - 1 ? \",\" : \"\");\n  });\n  if (additionalParameterName) {\n    formattedCalls.unshift(`${additionalParameterName}: ${additionalParameterValue},`);\n  }\n  return indentMiddleLines(`${fullName}(${os_1.default.EOL}${formattedCalls.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","os_1","util_1","Format","__importStar","Conversion","inspect_1","Object","defineProperty","exports","enumerable","get","ResultInspector","unsafeNativize","unsafeNativizeVariables","nativizeAccessList","nativize","result","options","arguments","length","undefined","numberFormatter","x","format","ethersCompatibleNativize","kind","error","raw","toBigInt","rawAsBN","type","typeClass","asBN","value","numericAsBN","asBoolean","asHex","asAddress","address","coercedResult","asString","Buffer","from","slice","toString","map","nativized","pairs","name","nativizedValue","push","visibility","contract","toLowerCase","selector","nativizeReturn","decoding","ethersCompatibleNativizeReturn","i","nativizeEventArgs","ethersCompatibleNativizeEventArgs","__length__","CalldataDecodingInspector","constructor","inspect","depth","custom","bind","fullName","class","typeName","abi","interpretations","multicall","formatMulticall","aggregate","formatAggregate","tryAggregate","requireSuccess","calls","stylize","deadlinedMulticall","deadline","decodings","specifiedBlockhashMulticall","specifiedBlockhash","formatFunctionLike","data","codecValue","containsDeliberateReadError","some","_ref","_ref2","LogDecodingInspector","className","definedIn","eventName","ReturndataDecodingInspector","dataString","EOL","contractKind","firstLine","immutables","prefixes","_ref3","maxLength","Math","max","prefix","paddedPrefixes","padStart","formattedValues","index","formatted","indentExcludingFirstLine","join","indentArray","input","indentation","line","repeat","lines","split","indentMiddleLines","header","values","suppressType","indent","_ref4","indexed","namePrefix","indexedPrefix","displayValue","typeString","Types","typeStringWithoutLocation","additionalParameterName","additionalParameterValue","formattedDecodings","formattedDecoding","unshift","formattedCalls","_ref5","formattedCall","replace"],"sources":["../../lib/export.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}