{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubarrayArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst IsSubarrayOf_1 = require(\"./helpers/IsSubarrayOf\");\nconst IntegerArbitrary_1 = require(\"./IntegerArbitrary\");\nclass SubarrayArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(originalArray, isOrdered, minLength, maxLength) {\n    super();\n    this.originalArray = originalArray;\n    this.isOrdered = isOrdered;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    if (minLength < 0 || minLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n    if (maxLength < 0 || maxLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n    if (minLength > maxLength) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n    this.lengthArb = new IntegerArbitrary_1.IntegerArbitrary(minLength, maxLength);\n    this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary_1.IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2))) : this.lengthArb;\n  }\n  generate(mrng, biasFactor) {\n    const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n    const size = lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const remainingElements = this.originalArray.map((_v, idx) => idx);\n    const ids = [];\n    for (let index = 0; index !== sizeValue; ++index) {\n      const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n      ids.push(remainingElements[selectedIdIndex]);\n      remainingElements.splice(selectedIdIndex, 1);\n    }\n    if (this.isOrdered) {\n      ids.sort((a, b) => a - b);\n    }\n    return new Value_1.Value(ids.map(i => this.originalArray[i]), size.context);\n  }\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n      return false;\n    }\n    return (0, IsSubarrayOf_1.isSubarrayOf)(this.originalArray, value);\n  }\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n    return this.lengthArb.shrink(value.length, context).map(newSize => {\n      return new Value_1.Value(value.slice(value.length - newSize.value), newSize.context);\n    }).join(value.length > this.minLength ? (0, LazyIterableIterator_1.makeLazy)(() => this.shrink(value.slice(1), undefined).filter(newValue => this.minLength <= newValue.value.length + 1).map(newValue => new Value_1.Value([value[0]].concat(newValue.value), undefined))) : Stream_1.Stream.nil());\n  }\n}\nexports.SubarrayArbitrary = SubarrayArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","SubarrayArbitrary","Arbitrary_1","require","Value_1","LazyIterableIterator_1","Stream_1","IsSubarrayOf_1","IntegerArbitrary_1","Arbitrary","constructor","originalArray","isOrdered","minLength","maxLength","length","Error","lengthArb","IntegerArbitrary","biasedLengthArb","Math","floor","log","generate","mrng","biasFactor","undefined","nextInt","size","sizeValue","remainingElements","map","_v","idx","ids","index","selectedIdIndex","push","splice","sort","a","b","Value","i","context","canShrinkWithoutContext","Array","isArray","isSubarrayOf","shrink","Stream","nil","newSize","slice","join","makeLazy","filter","newValue","concat"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/SubarrayArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubarrayArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst IsSubarrayOf_1 = require(\"./helpers/IsSubarrayOf\");\nconst IntegerArbitrary_1 = require(\"./IntegerArbitrary\");\nclass SubarrayArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(originalArray, isOrdered, minLength, maxLength) {\n        super();\n        this.originalArray = originalArray;\n        this.isOrdered = isOrdered;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        if (minLength < 0 || minLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n        if (maxLength < 0 || maxLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n        if (minLength > maxLength)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n        this.lengthArb = new IntegerArbitrary_1.IntegerArbitrary(minLength, maxLength);\n        this.biasedLengthArb =\n            minLength !== maxLength\n                ? new IntegerArbitrary_1.IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2)))\n                : this.lengthArb;\n    }\n    generate(mrng, biasFactor) {\n        const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n        const size = lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const remainingElements = this.originalArray.map((_v, idx) => idx);\n        const ids = [];\n        for (let index = 0; index !== sizeValue; ++index) {\n            const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n            ids.push(remainingElements[selectedIdIndex]);\n            remainingElements.splice(selectedIdIndex, 1);\n        }\n        if (this.isOrdered) {\n            ids.sort((a, b) => a - b);\n        }\n        return new Value_1.Value(ids.map((i) => this.originalArray[i]), size.context);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n            return false;\n        }\n        return (0, IsSubarrayOf_1.isSubarrayOf)(this.originalArray, value);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        return this.lengthArb\n            .shrink(value.length, context)\n            .map((newSize) => {\n            return new Value_1.Value(value.slice(value.length - newSize.value), newSize.context);\n        })\n            .join(value.length > this.minLength\n            ? (0, LazyIterableIterator_1.makeLazy)(() => this.shrink(value.slice(1), undefined)\n                .filter((newValue) => this.minLength <= newValue.value.length + 1)\n                .map((newValue) => new Value_1.Value([value[0]].concat(newValue.value), undefined)))\n            : Stream_1.Stream.nil());\n    }\n}\nexports.SubarrayArbitrary = SubarrayArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}