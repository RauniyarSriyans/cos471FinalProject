{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MixedCaseArbitrary = void 0;\nconst bigUintN_1 = require(\"../bigUintN\");\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst ToggleFlags_1 = require(\"./helpers/ToggleFlags\");\nclass MixedCaseArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(stringArb, toggleCase, untoggleAll) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n    this.untoggleAll = untoggleAll;\n  }\n  buildContextFor(rawStringValue, flagsValue) {\n    return {\n      rawString: rawStringValue.value,\n      rawStringContext: rawStringValue.context,\n      flags: flagsValue.value,\n      flagsContext: flagsValue.context\n    };\n  }\n  generate(mrng, biasFactor) {\n    const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringValue.value];\n    const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n    const flagsArb = (0, bigUintN_1.bigUintN)(togglePositions.length);\n    const flagsValue = flagsArb.generate(mrng, undefined);\n    (0, ToggleFlags_1.applyFlagsOnChars)(chars, flagsValue.value, togglePositions, this.toggleCase);\n    return new Value_1.Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n  }\n  canShrinkWithoutContext(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n    return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n  }\n  shrink(value, context) {\n    let contextSafe;\n    if (context !== undefined) {\n      contextSafe = context;\n    } else {\n      if (this.untoggleAll !== undefined) {\n        const untoggledValue = this.untoggleAll(value);\n        const valueChars = [...value];\n        const untoggledValueChars = [...untoggledValue];\n        const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(untoggledValueChars, this.toggleCase);\n        contextSafe = {\n          rawString: untoggledValue,\n          rawStringContext: undefined,\n          flags: (0, ToggleFlags_1.computeFlagsFromChars)(untoggledValueChars, valueChars, togglePositions),\n          flagsContext: undefined\n        };\n      } else {\n        contextSafe = {\n          rawString: value,\n          rawStringContext: undefined,\n          flags: BigInt(0),\n          flagsContext: undefined\n        };\n      }\n    }\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringValue => {\n      const nChars = [...nRawStringValue.value];\n      const nTogglePositions = (0, ToggleFlags_1.computeTogglePositions)(nChars, this.toggleCase);\n      const nFlags = (0, ToggleFlags_1.computeNextFlags)(flags, nTogglePositions.length);\n      (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlags, nTogglePositions, this.toggleCase);\n      return new Value_1.Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value_1.Value(nFlags, undefined)));\n    }).join((0, LazyIterableIterator_1.makeLazy)(() => {\n      const chars = [...rawString];\n      const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n      return (0, bigUintN_1.bigUintN)(togglePositions.length).shrink(flags, contextSafe.flagsContext).map(nFlagsValue => {\n        const nChars = chars.slice();\n        (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n        return new Value_1.Value(nChars.join(''), this.buildContextFor(new Value_1.Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n      });\n    }));\n  }\n}\nexports.MixedCaseArbitrary = MixedCaseArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","MixedCaseArbitrary","bigUintN_1","require","Arbitrary_1","Value_1","LazyIterableIterator_1","ToggleFlags_1","Arbitrary","constructor","stringArb","toggleCase","untoggleAll","buildContextFor","rawStringValue","flagsValue","rawString","rawStringContext","context","flags","flagsContext","generate","mrng","biasFactor","chars","togglePositions","computeTogglePositions","flagsArb","bigUintN","length","undefined","applyFlagsOnChars","Value","join","canShrinkWithoutContext","shrink","contextSafe","untoggledValue","valueChars","untoggledValueChars","computeFlagsFromChars","BigInt","map","nRawStringValue","nChars","nTogglePositions","nFlags","computeNextFlags","makeLazy","nFlagsValue","slice"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/MixedCaseArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MixedCaseArbitrary = void 0;\nconst bigUintN_1 = require(\"../bigUintN\");\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst LazyIterableIterator_1 = require(\"../../stream/LazyIterableIterator\");\nconst ToggleFlags_1 = require(\"./helpers/ToggleFlags\");\nclass MixedCaseArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(stringArb, toggleCase, untoggleAll) {\n        super();\n        this.stringArb = stringArb;\n        this.toggleCase = toggleCase;\n        this.untoggleAll = untoggleAll;\n    }\n    buildContextFor(rawStringValue, flagsValue) {\n        return {\n            rawString: rawStringValue.value,\n            rawStringContext: rawStringValue.context,\n            flags: flagsValue.value,\n            flagsContext: flagsValue.context,\n        };\n    }\n    generate(mrng, biasFactor) {\n        const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n        const chars = [...rawStringValue.value];\n        const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n        const flagsArb = (0, bigUintN_1.bigUintN)(togglePositions.length);\n        const flagsValue = flagsArb.generate(mrng, undefined);\n        (0, ToggleFlags_1.applyFlagsOnChars)(chars, flagsValue.value, togglePositions, this.toggleCase);\n        return new Value_1.Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n    }\n    canShrinkWithoutContext(value) {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        return this.untoggleAll !== undefined\n            ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value))\n            :\n                this.stringArb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        let contextSafe;\n        if (context !== undefined) {\n            contextSafe = context;\n        }\n        else {\n            if (this.untoggleAll !== undefined) {\n                const untoggledValue = this.untoggleAll(value);\n                const valueChars = [...value];\n                const untoggledValueChars = [...untoggledValue];\n                const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(untoggledValueChars, this.toggleCase);\n                contextSafe = {\n                    rawString: untoggledValue,\n                    rawStringContext: undefined,\n                    flags: (0, ToggleFlags_1.computeFlagsFromChars)(untoggledValueChars, valueChars, togglePositions),\n                    flagsContext: undefined,\n                };\n            }\n            else {\n                contextSafe = {\n                    rawString: value,\n                    rawStringContext: undefined,\n                    flags: BigInt(0),\n                    flagsContext: undefined,\n                };\n            }\n        }\n        const rawString = contextSafe.rawString;\n        const flags = contextSafe.flags;\n        return this.stringArb\n            .shrink(rawString, contextSafe.rawStringContext)\n            .map((nRawStringValue) => {\n            const nChars = [...nRawStringValue.value];\n            const nTogglePositions = (0, ToggleFlags_1.computeTogglePositions)(nChars, this.toggleCase);\n            const nFlags = (0, ToggleFlags_1.computeNextFlags)(flags, nTogglePositions.length);\n            (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlags, nTogglePositions, this.toggleCase);\n            return new Value_1.Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value_1.Value(nFlags, undefined)));\n        })\n            .join((0, LazyIterableIterator_1.makeLazy)(() => {\n            const chars = [...rawString];\n            const togglePositions = (0, ToggleFlags_1.computeTogglePositions)(chars, this.toggleCase);\n            return (0, bigUintN_1.bigUintN)(togglePositions.length)\n                .shrink(flags, contextSafe.flagsContext)\n                .map((nFlagsValue) => {\n                const nChars = chars.slice();\n                (0, ToggleFlags_1.applyFlagsOnChars)(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n                return new Value_1.Value(nChars.join(''), this.buildContextFor(new Value_1.Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n            });\n        }));\n    }\n}\nexports.MixedCaseArbitrary = MixedCaseArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}