{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.equalSlots = exports.slotAddress = exports.storageLengthToBytes = exports.isWordsLength = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:storage:utils\");\nconst Evm = __importStar(require(\"../evm\"));\nconst MappingKey = __importStar(require(\"../mapping-key\"));\nfunction isWordsLength(size) {\n  return size.words !== undefined;\n}\nexports.isWordsLength = isWordsLength;\nfunction storageLengthToBytes(size) {\n  if (isWordsLength(size)) {\n    debug(\"size.words %d\", size.words);\n    return size.words * Evm.Utils.WORD_SIZE;\n  } else {\n    return size.bytes;\n  }\n}\nexports.storageLengthToBytes = storageLengthToBytes;\n/**\n * convert a slot to a word corresponding to actual storage address\n *\n * if `slot` is an array, return hash of array values.\n * if `slot` array is nested, recurse on sub-arrays\n *\n * @param slot - number or possibly-nested array of numbers\n */\nfunction slotAddress(slot) {\n  if (slot.key !== undefined && slot.path !== undefined) {\n    // mapping reference\n    return Evm.Utils.keccak256(MappingKey.Encode.mappingKeyAsHex(slot.key), slotAddress(slot.path)).add(slot.offset);\n  } else if (slot.path !== undefined) {\n    const pathAddress = slotAddress(slot.path);\n    const path = slot.hashPath ? Evm.Utils.keccak256(pathAddress) : pathAddress;\n    return path.add(slot.offset);\n  } else {\n    return slot.offset;\n  }\n}\nexports.slotAddress = slotAddress;\n//note: this function compares slots mostly by structure,\n//rather than by their numerical value\nfunction equalSlots(slot1, slot2) {\n  if (!slot1 || !slot2) {\n    return !slot1 && !slot2; //if either is undefined, it's true only if both are\n  }\n\n  if (!slot1.offset.eq(slot2.offset)) {\n    return false;\n  }\n  if (slot1.hashPath !== slot2.hashPath) {\n    return false;\n  }\n  if (!equalSlots(slot1.path, slot2.path)) {\n    return false;\n  }\n  //to compare keys, we'll just compare their hex encodings\n  //(yes, that leaves some wiggle room, as it could consider different\n  //*types* of keys to be equal, but if keys are the only difference then\n  //that should determine those types, so it shouldn't be a problem)\n  if (!slot1.key || !slot2.key) {\n    //first, though, they likely don't *have* keys\n    return !slot1.key && !slot2.key;\n  }\n  //if they do have keys, though...\n  return Evm.Utils.equalData(MappingKey.Encode.encodeMappingKey(slot1.key), MappingKey.Encode.encodeMappingKey(slot2.key));\n}\nexports.equalSlots = equalSlots;","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","Evm","__importStar","MappingKey","isWordsLength","size","words","undefined","exports","storageLengthToBytes","Utils","WORD_SIZE","bytes","slotAddress","slot","key","path","keccak256","Encode","mappingKeyAsHex","add","offset","pathAddress","hashPath","equalSlots","slot1","slot2","eq","equalData","encodeMappingKey"],"sources":["../../../lib/storage/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}