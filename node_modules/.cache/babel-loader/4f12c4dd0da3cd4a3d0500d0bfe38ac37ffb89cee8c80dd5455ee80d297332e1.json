{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integer = void 0;\nconst IntegerArbitrary_1 = require(\"./_internals/IntegerArbitrary\");\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\nfunction integer() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fullConstraints = buildCompleteIntegerConstraints(constraints);\n  if (fullConstraints.min > fullConstraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n  if (!Number.isInteger(fullConstraints.min)) {\n    throw new Error('fc.integer minimum value should be an integer');\n  }\n  if (!Number.isInteger(fullConstraints.max)) {\n    throw new Error('fc.integer maximum value should be an integer');\n  }\n  return new IntegerArbitrary_1.IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\nexports.integer = integer;","map":{"version":3,"names":["Object","defineProperty","exports","value","integer","IntegerArbitrary_1","require","buildCompleteIntegerConstraints","constraints","min","undefined","max","arguments","length","fullConstraints","Error","Number","isInteger","IntegerArbitrary"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/integer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.integer = void 0;\nconst IntegerArbitrary_1 = require(\"./_internals/IntegerArbitrary\");\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nfunction integer(constraints = {}) {\n    const fullConstraints = buildCompleteIntegerConstraints(constraints);\n    if (fullConstraints.min > fullConstraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!Number.isInteger(fullConstraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!Number.isInteger(fullConstraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    return new IntegerArbitrary_1.IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\nexports.integer = integer;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AACnE,SAASC,+BAA+BA,CAACC,WAAW,EAAE;EAClD,MAAMC,GAAG,GAAGD,WAAW,CAACC,GAAG,KAAKC,SAAS,GAAGF,WAAW,CAACC,GAAG,GAAG,CAAC,UAAU;EACzE,MAAME,GAAG,GAAGH,WAAW,CAACG,GAAG,KAAKD,SAAS,GAAGF,WAAW,CAACG,GAAG,GAAG,UAAU;EACxE,OAAO;IAAEF,GAAG;IAAEE;EAAI,CAAC;AACvB;AACA,SAASP,OAAOA,CAAA,EAAmB;EAAA,IAAlBI,WAAW,GAAAI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAF,SAAA,GAAAE,SAAA,MAAG,CAAC,CAAC;EAC7B,MAAME,eAAe,GAAGP,+BAA+B,CAACC,WAAW,CAAC;EACpE,IAAIM,eAAe,CAACL,GAAG,GAAGK,eAAe,CAACH,GAAG,EAAE;IAC3C,MAAM,IAAII,KAAK,CAAC,0EAA0E,CAAC;EAC/F;EACA,IAAI,CAACC,MAAM,CAACC,SAAS,CAACH,eAAe,CAACL,GAAG,CAAC,EAAE;IACxC,MAAM,IAAIM,KAAK,CAAC,+CAA+C,CAAC;EACpE;EACA,IAAI,CAACC,MAAM,CAACC,SAAS,CAACH,eAAe,CAACH,GAAG,CAAC,EAAE;IACxC,MAAM,IAAII,KAAK,CAAC,+CAA+C,CAAC;EACpE;EACA,OAAO,IAAIV,kBAAkB,CAACa,gBAAgB,CAACJ,eAAe,CAACL,GAAG,EAAEK,eAAe,CAACH,GAAG,CAAC;AAC5F;AACAT,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}