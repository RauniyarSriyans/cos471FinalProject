{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getterParameters = exports.definitionToAbi = exports.isContractPayable = exports.mutability = exports.functionClass = exports.functionKind = exports.parameters = exports.valueDefinition = exports.keyDefinition = exports.baseDefinition = exports.rationalValue = exports.regularizeTypeIdentifier = exports.spliceLocation = exports.isSimpleConstant = exports.stackSize = exports.contractKind = exports.referenceType = exports.isReference = exports.isEnum = exports.isMapping = exports.isStruct = exports.staticLengthAsString = exports.staticLength = exports.isDynamicArray = exports.isArray = exports.decimalPlaces = exports.specifiedSize = exports.visibility = exports.typeId = exports.typeClassLongForm = exports.typeClass = exports.typeStringWithoutLocation = exports.typeString = exports.typeIdentifier = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:ast:utils\");\nconst Common = __importStar(require(\"../common\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\n/** @category Definition Reading */\nfunction typeIdentifier(definition) {\n  return definition.typeDescriptions.typeIdentifier;\n}\nexports.typeIdentifier = typeIdentifier;\n/** @category Definition Reading */\nfunction typeString(definition) {\n  return definition.typeDescriptions.typeString;\n}\nexports.typeString = typeString;\n/**\n * Returns the type string, but with location (if any) stripped off the end\n * @category Definition Reading\n */\nfunction typeStringWithoutLocation(definition) {\n  if (definition.nodeType === \"YulTypedName\") {\n    //for handling Yul variables\n    return \"bytes32\";\n  }\n  return typeString(definition).replace(/ (storage|memory|calldata)( slice)?$/, \"\");\n}\nexports.typeStringWithoutLocation = typeStringWithoutLocation;\n/**\n * returns basic type class for a variable definition node\n * e.g.:\n *  `t_uint256` becomes `uint`\n *  `t_struct$_Thing_$20_memory_ptr` becomes `struct`\n * @category Definition Reading\n */\nfunction typeClass(definition) {\n  if (definition.nodeType === \"YulTypedName\") {\n    //for handling Yul variables\n    return \"bytes\";\n  }\n  return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];\n}\nexports.typeClass = typeClass;\n/**\n * similar to typeClass, but includes any numeric qualifiers\n * e.g.:\n * `t_uint256` becomes `uint256`\n * @category Definition Reading\n */\nfunction typeClassLongForm(definition) {\n  return typeIdentifier(definition).match(/t_([^$_]+)/)[1];\n}\nexports.typeClassLongForm = typeClassLongForm;\n/**\n * for user-defined types -- structs, enums, contracts\n * often you can get these from referencedDeclaration, but not\n * always\n * @category Definition Reading\n */\nfunction typeId(definition) {\n  debug(\"definition %O\", definition);\n  return parseInt(typeIdentifier(definition).match(/\\$(\\d+)(_(storage|memory|calldata)(_ptr(_slice)?)?)?$/)[1]);\n}\nexports.typeId = typeId;\n/**\n * For function types; returns internal or external\n * (not for use on other types! will cause an error!)\n * should only return \"internal\" or \"external\"\n * @category Definition Reading\n */\nfunction visibility(definition) {\n  return definition.typeName ? definition.typeName.visibility : definition.visibility;\n}\nexports.visibility = visibility;\n/**\n * e.g. uint48 -> 6\n * @return size in bytes for explicit type size, or `null` if not stated\n * @category Definition Reading\n */\nfunction specifiedSize(definition) {\n  if (definition.nodeType === \"YulTypedName\") {\n    return 32; //for handling Yul variables\n  }\n\n  let specified = typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/);\n  if (!specified) {\n    return null;\n  }\n  let num = parseInt(specified[1]);\n  switch (typeClass(definition)) {\n    case \"int\":\n    case \"uint\":\n    case \"fixed\":\n    case \"ufixed\":\n      return num / 8;\n    case \"bytes\":\n      return num;\n    default:\n      debug(\"Unknown type for size specification: %s\", typeIdentifier(definition));\n  }\n}\nexports.specifiedSize = specifiedSize;\n/**\n * for fixed-point types, obviously\n * @category Definition Reading\n */\nfunction decimalPlaces(definition) {\n  return parseInt(typeIdentifier(definition).match(/t_[a-z]+[0-9]+x([0-9]+)/)[1]);\n}\nexports.decimalPlaces = decimalPlaces;\n/** @category Definition Reading */\nfunction isArray(definition) {\n  return typeIdentifier(definition).match(/^t_array/) != null;\n}\nexports.isArray = isArray;\n/** @category Definition Reading */\nfunction isDynamicArray(definition) {\n  return isArray(definition) &&\n  //NOTE: we do this by parsing the type identifier, rather than by just\n  //checking the length field, because we might be using this on a faked-up\n  //definition\n  typeIdentifier(definition).match(/\\$dyn_(storage|memory|calldata)(_ptr(_slice)?)?$/) != null;\n}\nexports.isDynamicArray = isDynamicArray;\n/**\n * length of a statically sized array -- please only use for arrays\n * already verified to be static!\n * @category Definition Reading\n */\nfunction staticLength(definition) {\n  //NOTE: we do this by parsing the type identifier, rather than by just\n  //checking the length field, because we might be using this on a faked-up\n  //definition\n  return parseInt(staticLengthAsString(definition));\n}\nexports.staticLength = staticLength;\n/**\n * see staticLength for explanation\n * @category Definition Reading\n */\nfunction staticLengthAsString(definition) {\n  return typeIdentifier(definition).match(/\\$(\\d+)_(storage|memory|calldata)(_ptr(_slice)?)?$/)[1];\n}\nexports.staticLengthAsString = staticLengthAsString;\n/** @category Definition Reading */\nfunction isStruct(definition) {\n  return typeIdentifier(definition).match(/^t_struct/) != null;\n}\nexports.isStruct = isStruct;\n/** @category Definition Reading */\nfunction isMapping(definition) {\n  return typeIdentifier(definition).match(/^t_mapping/) != null;\n}\nexports.isMapping = isMapping;\n/** @category Definition Reading */\nfunction isEnum(definition) {\n  return typeIdentifier(definition).match(/^t_enum/) != null;\n}\nexports.isEnum = isEnum;\n/** @category Definition Reading */\nfunction isReference(definition) {\n  return typeIdentifier(definition).match(/_(memory|storage|calldata)(_ptr(_slice)?)?$/) != null;\n}\nexports.isReference = isReference;\n/**\n * note: only use this on things already verified to be references\n * @category Definition Reading\n */\nfunction referenceType(definition) {\n  return typeIdentifier(definition).match(/_([^_]+)(_ptr(_slice)?)?$/)[1];\n}\nexports.referenceType = referenceType;\n/**\n * only for contract types, obviously! will yield nonsense otherwise!\n * @category Definition Reading\n */\nfunction contractKind(definition) {\n  return typeString(definition).split(\" \")[0];\n}\nexports.contractKind = contractKind;\n/**\n * stack size, in words, of a given type\n * note: this function assumes that UDVTs only ever take up\n * a single word, which is currently true\n * @category Definition Reading\n */\nfunction stackSize(definition) {\n  if (typeClass(definition) === \"function\" && visibility(definition) === \"external\") {\n    return 2;\n  }\n  if (isReference(definition) && referenceType(definition) === \"calldata\") {\n    if (typeClass(definition) === \"string\" || typeClass(definition) === \"bytes\") {\n      return 2;\n    }\n    if (isDynamicArray(definition)) {\n      return 2;\n    }\n  }\n  return 1;\n}\nexports.stackSize = stackSize;\n/** @category Definition Reading */\nfunction isSimpleConstant(definition) {\n  const types = [\"stringliteral\", \"rational\"];\n  return types.includes(typeClass(definition));\n}\nexports.isSimpleConstant = isSimpleConstant;\n/**\n * definition: a storage reference definition\n * location: the location you want it to refer to instead\n * @category Definition Reading\n */\nfunction spliceLocation(definition, location) {\n  debug(\"definition %O\", definition);\n  return Object.assign(Object.assign({}, definition), {\n    typeDescriptions: Object.assign(Object.assign({}, definition.typeDescriptions), {\n      typeIdentifier: definition.typeDescriptions.typeIdentifier.replace(/_(storage|memory|calldata)(?=((_slice)?_ptr)?$)/, \"_\" + location)\n    })\n  });\n}\nexports.spliceLocation = spliceLocation;\n/**\n * adds \"_ptr\" on to the end of type identifiers that might need it; note that\n * this operates on identifiers, not definitions\n * @category Definition Reading\n */\nfunction regularizeTypeIdentifier(identifier) {\n  return identifier.replace(/(_(storage|memory|calldata))((_slice)?_ptr)?$/, \"$1_ptr\" //this used to use lookbehind for clarity, but Firefox...\n  //(see: https://github.com/trufflesuite/truffle/issues/3068 )\n  );\n}\n\nexports.regularizeTypeIdentifier = regularizeTypeIdentifier;\n/**\n * extract the actual numerical value from a node of type rational.\n * currently assumes result will be integer (currently returns BN)\n * @category Definition Reading\n */\nfunction rationalValue(definition) {\n  let identifier = typeIdentifier(definition);\n  let absoluteValue = identifier.match(/_(\\d+)_by_1$/)[1];\n  let isNegative = identifier.match(/_minus_/) != null;\n  return isNegative ? new bn_js_1.default(absoluteValue).neg() : new bn_js_1.default(absoluteValue);\n}\nexports.rationalValue = rationalValue;\n/** @category Definition Reading */\nfunction baseDefinition(definition) {\n  if (definition.typeName && definition.typeName.baseType) {\n    return definition.typeName.baseType;\n  }\n  if (definition.baseType) {\n    return definition.baseType;\n  }\n  //otherwise, we'll have to spoof it up ourselves\n  let baseIdentifier = typeIdentifier(definition).match(/^t_array\\$_(.*)_\\$/)[1];\n  //greedy match to extract everything from first to last dollar sign\n  // HACK - internal types for memory or storage also seem to be pointers\n  baseIdentifier = regularizeTypeIdentifier(baseIdentifier);\n  // another HACK - we get away with it because we're only using that one property\n  let result = (0, cloneDeep_1.default)(definition);\n  result.typeDescriptions.typeIdentifier = baseIdentifier;\n  return result;\n  //WARNING -- these hacks do *not* correctly handle all cases!\n  //they do, however, handle the cases we currently need.\n}\n\nexports.baseDefinition = baseDefinition;\n/**\n * for use for mappings and arrays only!\n * for arrays, fakes up a uint definition\n * @category Definition Reading\n */\nfunction keyDefinition(definition, scopes) {\n  let result;\n  switch (typeClass(definition)) {\n    case \"mapping\":\n      //first: is there a key type already there? if so just use that\n      if (definition.keyType) {\n        return definition.keyType;\n      }\n      if (definition.typeName && definition.typeName.keyType) {\n        return definition.typeName.keyType;\n      }\n      //otherwise: is there a referencedDeclaration? if so try using that\n      let baseDeclarationId = definition.referencedDeclaration;\n      debug(\"baseDeclarationId %d\", baseDeclarationId);\n      //if there's a referencedDeclaration, we'll use that\n      if (baseDeclarationId !== undefined) {\n        let baseDeclaration = scopes[baseDeclarationId].definition;\n        return baseDeclaration.keyType || baseDeclaration.typeName.keyType;\n      }\n      //otherwise, we'll need to perform some hackery, similarly to in baseDefinition;\n      //we'll have to spoof it up ourselves\n      let keyIdentifier = typeIdentifier(definition).match(/^t_mapping\\$_(.*?)_\\$_/)[1];\n      //use *non*-greedy match; note that if the key type could include\n      //the sequence \"_$_\", this could cause a problem, but they can't; the only\n      //valid key types that include dollar signs at all are user-defined types,\n      //which contain both \"$_\" and \"_$\" but never \"_$_\".\n      // HACK - internal types for memory or storage also seem to be pointers\n      keyIdentifier = regularizeTypeIdentifier(keyIdentifier);\n      let keyString = typeString(definition).match(/mapping\\((.*?) => .*\\)( storage)?$/)[1];\n      //use *non*-greedy match; note that if the key type could include\n      //\"=>\", this could cause a problem, but mappings are not allowed as key\n      //types, so this can't come up\n      // another HACK - we get away with it because we're only using that one property\n      result = (0, cloneDeep_1.default)(definition);\n      result.typeDescriptions = {\n        typeIdentifier: keyIdentifier,\n        typeString: keyString\n      };\n      return result;\n    case \"array\":\n      //HACK -- again we should get away with it because for a uint256 we don't\n      //really need to inspect the other properties\n      result = (0, cloneDeep_1.default)(definition);\n      result.typeDescriptions = {\n        typeIdentifier: \"t_uint256\",\n        typeString: \"uint256\"\n      };\n      return result;\n    default:\n      debug(\"unrecognized index access!\");\n  }\n}\nexports.keyDefinition = keyDefinition;\n/**\n * for use for mappings only!\n * @category Definition Reading\n */\nfunction valueDefinition(definition, scopes) {\n  let result;\n  //first: is there a value type already there? if so just use that\n  if (definition.valueType) {\n    return definition.valueType;\n  }\n  if (definition.typeName && definition.typeName.valueType) {\n    return definition.typeName.valueType;\n  }\n  //otherwise: is there a referencedDeclaration? if so try using that\n  let baseDeclarationId = definition.referencedDeclaration;\n  debug(\"baseDeclarationId %d\", baseDeclarationId);\n  //if there's a referencedDeclaration, we'll use that\n  if (baseDeclarationId !== undefined) {\n    let baseDeclaration = scopes[baseDeclarationId].definition;\n    return baseDeclaration.valueType || baseDeclaration.typeName.valueType;\n  }\n  //otherwise, we'll need to perform some hackery, similarly to in keyDefinition;\n  //we'll have to spoof it up ourselves\n  let valueIdentifier = typeIdentifier(definition).match(/^t_mapping\\$_.*?_\\$_(.*)_\\$/)[1];\n  //use *non*-greedy match on the key; note that if the key type could include\n  //the sequence \"_$_\", this could cause a problem, but they can't; the only\n  //valid key types that include dollar signs at all are user-defined types,\n  //which contain both \"$_\" and \"_$\" but never \"_$_\".\n  // HACK - internal types for memory or storage also seem to be pointers\n  valueIdentifier = regularizeTypeIdentifier(valueIdentifier);\n  let valueString = typeString(definition).match(/mapping\\(.*? => (.*)\\)( storage)?$/)[1];\n  //use *non*-greedy match; note that if the key type could include\n  //\"=>\", this could cause a problem, but mappings are not allowed as key\n  //types, so this can't come up\n  // another HACK - we get away with it because we're only using that one property\n  result = (0, cloneDeep_1.default)(definition);\n  result.typeDescriptions = {\n    typeIdentifier: valueIdentifier,\n    typeString: valueString\n  };\n  return result;\n}\nexports.valueDefinition = valueDefinition;\n/**\n * returns input parameters, then output parameters\n * NOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\n * NOT FOR FUNCTION DEFINITIONS\n * @category Definition Reading\n */\nfunction parameters(definition) {\n  let typeObject = definition.typeName || definition;\n  if (typeObject.parameterTypes && typeObject.returnParameterTypes) {\n    return [typeObject.parameterTypes.parameters, typeObject.returnParameterTypes.parameters];\n  } else {\n    return undefined;\n  }\n}\nexports.parameters = parameters;\n/**\n * compatibility function, since pre-0.5.0 functions don't have node.kind\n * returns undefined if you don't put in a function node\n * @category Definition Reading\n */\nfunction functionKind(node) {\n  if (node.nodeType !== \"FunctionDefinition\") {\n    return undefined;\n  }\n  if (node.kind !== undefined) {\n    //if we're dealing with 0.5.x, we can just read node.kind\n    return node.kind;\n  }\n  //otherwise, we need this little shim\n  if (node.isConstructor) {\n    return \"constructor\";\n  }\n  return node.name === \"\" ? \"fallback\" : \"function\";\n}\nexports.functionKind = functionKind;\n//this is kind of a weird one, it exposes some Solidity internals.\n//for internal functions it'll return \"internal\".\n//for external functions it'll return \"external\".\n//for library functions it'll return \"delegatecall\".\n//and for builtin functions, it'll return an internal name for\n//that particular builtin function.\n//(there are more possibilities but I'm not going to list them all here)\nfunction functionClass(node) {\n  const match = typeIdentifier(node).match(/^t_function_([^_]+)_/);\n  return match ? match[1] : undefined;\n}\nexports.functionClass = functionClass;\n/**\n * similar compatibility function for mutability for pre-0.4.16 versions\n * returns undefined if you don't give it a FunctionDefinition or\n * VariableDeclaration\n * @category Definition Reading\n */\nfunction mutability(node) {\n  node = node.typeName || node;\n  if (node.nodeType !== \"FunctionDefinition\" && node.nodeType !== \"FunctionTypeName\") {\n    return undefined;\n  }\n  if (node.stateMutability !== undefined) {\n    //if we're dealing with 0.4.16 or later, we can just read node.stateMutability\n    return node.stateMutability;\n  }\n  //otherwise, we need this little shim\n  if (node.payable) {\n    return \"payable\";\n  }\n  if (node.constant) {\n    //yes, it means \"view\" even if you're looking at a variable declaration!\n    //old Solidity was weird!\n    return \"view\";\n  }\n  return \"nonpayable\";\n}\nexports.mutability = mutability;\n/**\n * takes a contract definition and asks, does it have a payable fallback\n * function?\n * @category Definition Reading\n */\nfunction isContractPayable(definition) {\n  return definition.nodes.some(node => node.nodeType === \"FunctionDefinition\" && (functionKind(node) === \"fallback\" || functionKind(node) === \"receive\") && mutability(node) === \"payable\");\n}\nexports.isContractPayable = isContractPayable;\n/**\n * the main function. just does some dispatch.\n * returns undefined on bad input\n */\nfunction definitionToAbi(node, referenceDeclarations) {\n  switch (node.nodeType) {\n    case \"FunctionDefinition\":\n      if (node.visibility === \"public\" || node.visibility === \"external\") {\n        return functionDefinitionToAbi(node, referenceDeclarations);\n      } else {\n        return undefined;\n      }\n    case \"EventDefinition\":\n      return eventDefinitionToAbi(node, referenceDeclarations);\n    case \"ErrorDefinition\":\n      return errorDefinitionToAbi(node, referenceDeclarations);\n    case \"VariableDeclaration\":\n      if (node.visibility === \"public\") {\n        return getterDefinitionToAbi(node, referenceDeclarations);\n      } else {\n        return undefined;\n      }\n    default:\n      return undefined;\n  }\n}\nexports.definitionToAbi = definitionToAbi;\n//note: not for FunctionTypeNames or VariableDeclarations\nfunction functionDefinitionToAbi(node, referenceDeclarations) {\n  let kind = functionKind(node);\n  let stateMutability = mutability(node);\n  let payable = stateMutability === \"payable\";\n  let inputs;\n  switch (kind) {\n    case \"function\":\n      let name = node.name;\n      let outputs = parametersToAbi(node.returnParameters.parameters, referenceDeclarations);\n      inputs = parametersToAbi(node.parameters.parameters, referenceDeclarations);\n      return {\n        type: \"function\",\n        name,\n        inputs,\n        outputs,\n        stateMutability\n      };\n    case \"constructor\":\n      inputs = parametersToAbi(node.parameters.parameters, referenceDeclarations);\n      //note: need to coerce because of mutability restrictions\n      return {\n        type: \"constructor\",\n        inputs,\n        stateMutability,\n        payable\n      };\n    case \"fallback\":\n      //note: need to coerce because of mutability restrictions\n      return {\n        type: \"fallback\",\n        stateMutability,\n        payable\n      };\n    case \"receive\":\n      //note: need to coerce because of mutability restrictions\n      return {\n        type: \"receive\",\n        stateMutability,\n        payable\n      };\n  }\n}\nfunction eventDefinitionToAbi(node, referenceDeclarations) {\n  let inputs = parametersToAbi(node.parameters.parameters, referenceDeclarations);\n  let name = node.name;\n  let anonymous = node.anonymous;\n  return {\n    type: \"event\",\n    inputs,\n    name,\n    anonymous\n  };\n}\nfunction errorDefinitionToAbi(node, referenceDeclarations) {\n  let inputs = parametersToAbi(node.parameters.parameters, referenceDeclarations);\n  let name = node.name;\n  return {\n    type: \"error\",\n    inputs,\n    name\n  };\n}\nfunction parametersToAbi(nodes, referenceDeclarations) {\n  return nodes.map(node => parameterToAbi(node, referenceDeclarations));\n}\n//NOTE: This function is only for types that could potentially go in the ABI!\n//(otherwise it could, say, loop infinitely)\n//currently it will only ever be called on those because it's only called from\n//definitionToAbi, which filters out any definitions that are not for\n//this that *actually* go in the ABI\n//if you want to expand it to handle those (by throwing an exception, say),\n//you'll need to give it a way to detect circularities\nfunction parameterToAbi(node, referenceDeclarations) {\n  let name = node.name; //may be the empty string... or even undefined for a base type\n  let components;\n  let internalType = typeStringWithoutLocation(node);\n  //is this an array? if so use separate logic\n  if (typeClass(node) === \"array\") {\n    let baseType = node.typeName ? node.typeName.baseType : node.baseType;\n    let baseAbi = parameterToAbi(baseType, referenceDeclarations);\n    let arraySuffix = isDynamicArray(node) ? `[]` : `[${staticLength(node)}]`;\n    const parameter = {\n      name,\n      type: baseAbi.type + arraySuffix,\n      components: baseAbi.components,\n      internalType\n    };\n    if (\"indexed\" in node) {\n      return Object.assign(Object.assign({}, parameter), {\n        indexed: node.indexed\n      });\n    } else {\n      return parameter;\n    }\n  }\n  let abiTypeString = toAbiType(node, referenceDeclarations);\n  //otherwise... is it a struct? if so we need to populate components\n  if (typeClass(node) === \"struct\") {\n    let id = typeId(node);\n    let referenceDeclaration = referenceDeclarations[id];\n    if (referenceDeclaration === undefined) {\n      let typeToDisplay = typeString(node);\n      throw new Common.UnknownUserDefinedTypeError(id.toString(), typeToDisplay);\n    }\n    components = parametersToAbi(referenceDeclaration.members, referenceDeclarations);\n  }\n  const parameter = {\n    name,\n    type: abiTypeString,\n    components,\n    internalType\n  };\n  if (\"indexed\" in node) {\n    return Object.assign(Object.assign({}, parameter), {\n      indexed: node.indexed\n    });\n  } else {\n    return parameter;\n  }\n}\n//note: this is only meant for non-array types that can go in the ABI\n//it returns how that type is notated in the ABI -- just the string,\n//to be clear, not components of tuples\n//again, NOT FOR ARRAYS\nfunction toAbiType(node, referenceDeclarations) {\n  let basicType = typeClassLongForm(node); //get that whole first segment!\n  switch (basicType) {\n    case \"contract\":\n      return \"address\";\n    case \"struct\":\n      return \"tuple\";\n    //the more detailed checking will be handled elsewhere\n    case \"enum\":\n      {\n        const referenceId = typeId(node);\n        const referenceDeclaration = referenceDeclarations[referenceId];\n        if (referenceDeclaration === undefined) {\n          const typeToDisplay = typeString(node);\n          throw new Common.UnknownUserDefinedTypeError(referenceId.toString(), typeToDisplay);\n        }\n        const numOptions = referenceDeclaration.members.length;\n        const bits = 8 * Math.ceil(Math.log2(numOptions) / 8);\n        return `uint${bits}`;\n      }\n    case \"userDefinedValueType\":\n      {\n        const referenceId = typeId(node);\n        const referenceDeclaration = referenceDeclarations[referenceId];\n        if (referenceDeclaration === undefined) {\n          const typeToDisplay = typeString(node);\n          throw new Common.UnknownUserDefinedTypeError(referenceId.toString(), typeToDisplay);\n        }\n        const underlyingType = referenceDeclaration.underlyingType;\n        return toAbiType(underlyingType, referenceDeclarations);\n      }\n    default:\n      return basicType;\n    //note that: int/uint/fixed/ufixed/bytes will have their size and such left on;\n    //address will have \"payable\" left off;\n    //external functions will be reduced to \"function\" (and internal functions shouldn't\n    //be passed in!)\n    //(mappings shouldn't be passed in either obviously)\n    //(nor arrays :P )\n  }\n}\n\nfunction getterDefinitionToAbi(node, referenceDeclarations) {\n  debug(\"getter node: %O\", node);\n  let name = node.name;\n  let {\n    inputs,\n    outputs\n  } = getterParameters(node, referenceDeclarations);\n  let inputsAbi = parametersToAbi(inputs, referenceDeclarations);\n  let outputsAbi = parametersToAbi(outputs, referenceDeclarations);\n  return {\n    type: \"function\",\n    name,\n    inputs: inputsAbi,\n    outputs: outputsAbi,\n    stateMutability: \"view\"\n  };\n}\n//how getter parameters work:\n//INPUT:\n//types other than arrays and mappings take no input.\n//array getters take uint256 input. mapping getters take input of their key type.\n//if arrays, mappings, stacked, then takes multiple inputs, in order from outside\n//to in.\n//These parameters are unnamed.\n//OUTPUT:\n//if base type (beneath mappings & arrays) is not a struct, returns that.\n//(This return parameter has no name -- it is *not* named for the variable!)\n//if it is a struct, returns multiple outputs, one for each member of the struct,\n//*except* arrays and mappings.  (And they have names, the names of the members.)\n//important note: inner structs within a struct are just returned, not\n//partially destructured like the outermost struct!  Yes, this is confusing.\nfunction getterParameters(node, referenceDeclarations) {\n  let baseNode = node.typeName || node;\n  let inputs = [];\n  while (typeClass(baseNode) === \"array\" || typeClass(baseNode) === \"mapping\") {\n    let keyNode = keyDefinition(baseNode); //note: if baseNode is an array, this spoofs up a uint256 definition\n    inputs.push(Object.assign(Object.assign({}, keyNode), {\n      name: \"\"\n    })); //again, getter input params have no name\n    switch (typeClass(baseNode)) {\n      case \"array\":\n        baseNode = baseNode.baseType;\n        break;\n      case \"mapping\":\n        baseNode = baseNode.valueType;\n        break;\n    }\n  }\n  //at this point, baseNode should hold the base type\n  //now we face the question: is it a struct?\n  if (typeClass(baseNode) === \"struct\") {\n    let id = typeId(baseNode);\n    let referenceDeclaration = referenceDeclarations[id];\n    if (referenceDeclaration === undefined) {\n      let typeToDisplay = typeString(baseNode);\n      throw new Common.UnknownUserDefinedTypeError(id.toString(), typeToDisplay);\n    }\n    let outputs = referenceDeclaration.members.filter(member => typeClass(member) !== \"array\" && typeClass(member) !== \"mapping\");\n    return {\n      inputs,\n      outputs\n    }; //no need to wash name!\n  } else {\n    //only one output; it's just the base node, with its name washed\n    return {\n      inputs,\n      outputs: [Object.assign(Object.assign({}, baseNode), {\n        name: \"\"\n      })]\n    };\n  }\n}\nexports.getterParameters = getterParameters;","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","Common","__importStar","bn_js_1","cloneDeep_1","typeIdentifier","definition","typeDescriptions","exports","typeString","typeStringWithoutLocation","nodeType","replace","typeClass","match","typeClassLongForm","typeId","parseInt","visibility","typeName","specifiedSize","specified","num","decimalPlaces","isArray","isDynamicArray","staticLength","staticLengthAsString","isStruct","isMapping","isEnum","isReference","referenceType","contractKind","split","stackSize","isSimpleConstant","types","includes","spliceLocation","location","Object","assign","regularizeTypeIdentifier","identifier","rationalValue","absoluteValue","isNegative","neg","baseDefinition","baseType","baseIdentifier","result","keyDefinition","scopes","keyType","baseDeclarationId","referencedDeclaration","undefined","baseDeclaration","keyIdentifier","keyString","valueDefinition","valueType","valueIdentifier","valueString","parameters","typeObject","parameterTypes","returnParameterTypes","functionKind","node","kind","isConstructor","name","functionClass","mutability","stateMutability","payable","constant","isContractPayable","nodes","some","definitionToAbi","referenceDeclarations","functionDefinitionToAbi","eventDefinitionToAbi","errorDefinitionToAbi","getterDefinitionToAbi","inputs","outputs","parametersToAbi","returnParameters","type","anonymous","map","parameterToAbi","components","internalType","baseAbi","arraySuffix","parameter","indexed","abiTypeString","toAbiType","id","referenceDeclaration","typeToDisplay","UnknownUserDefinedTypeError","toString","members","basicType","referenceId","numOptions","length","bits","Math","ceil","log2","underlyingType","getterParameters","inputsAbi","outputsAbi","baseNode","keyNode","push","filter","member"],"sources":["../../../lib/ast/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}