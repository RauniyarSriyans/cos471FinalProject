{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mappingKeyAsHex = exports.encodeMappingKey = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:mapping-key:encode\");\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\nconst BytesEncode = __importStar(require(\"../../bytes/encode\"));\n//UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n/**\n * @Category Encoding (low-level)\n */\nfunction encodeMappingKey(input) {\n  if (input.type.typeClass === \"string\" || input.type.typeClass === \"bytes\" && input.type.kind === \"dynamic\") {\n    return BytesEncode.encodeBytes(input);\n  } else {\n    return BasicEncode.encodeBasic(input);\n  }\n}\nexports.encodeMappingKey = encodeMappingKey;\n/**\n * @Category Encoding (low-level)\n */\nfunction mappingKeyAsHex(input) {\n  return Conversion.toHexString(encodeMappingKey(input));\n}\nexports.mappingKeyAsHex = mappingKeyAsHex;","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","Conversion","__importStar","BasicEncode","BytesEncode","encodeMappingKey","input","type","typeClass","kind","encodeBytes","encodeBasic","exports","mappingKeyAsHex","toHexString"],"sources":["../../../../lib/mapping-key/encode/index.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAMC,KAAK,GAAG,IAAAH,OAAA,CAAAI,OAAW,EAAC,0BAA0B,CAAC;AAGrD,MAAAC,UAAA,GAAAC,YAAA,CAAAJ,OAAA;AACA,MAAAK,WAAA,GAAAD,YAAA,CAAAJ,OAAA;AACA,MAAAM,WAAA,GAAAF,YAAA,CAAAJ,OAAA;AAEA;AACA;AACA;AAEA;;;AAGA,SAAgBO,gBAAgBA,CAC9BC,KAAoC;EAEpC,IACEA,KAAK,CAACC,IAAI,CAACC,SAAS,KAAK,QAAQ,IAChCF,KAAK,CAACC,IAAI,CAACC,SAAS,KAAK,OAAO,IAAIF,KAAK,CAACC,IAAI,CAACE,IAAI,KAAK,SAAU,EACnE;IACA,OAAOL,WAAW,CAACM,WAAW,CACiCJ,KAAK,CACnE;GACF,MAAM;IACL,OAAOH,WAAW,CAACQ,WAAW,CAACL,KAAK,CAAC;;AAEzC;AAbAM,OAAA,CAAAP,gBAAA,GAAAA,gBAAA;AAeA;;;AAGA,SAAgBQ,eAAeA,CAACP,KAAoC;EAClE,OAAOL,UAAU,CAACa,WAAW,CAACT,gBAAgB,CAACC,KAAK,CAAC,CAAC;AACxD;AAFAM,OAAA,CAAAC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}