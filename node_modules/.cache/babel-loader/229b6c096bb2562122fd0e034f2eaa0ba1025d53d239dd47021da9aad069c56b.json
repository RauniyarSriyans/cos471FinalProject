{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeTopic = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:topic:encode\");\nconst Conversion = __importStar(require(\"../../conversion\"));\nconst Evm = __importStar(require(\"../../evm\"));\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\n/**\n * Encodes for event topics (indexed parameters).\n * Warning: This function is not fully implemented yet!\n * @Category Encoding (low-level)\n */\nfunction encodeTopic(input) {\n  //errors can't be encoded\n  if (input.kind === \"error\") {\n    debug(\"input: %O\", input);\n    //...unless it's an IndexedReferenceTypeError, in which\n    //case, let's read otu that raw data!\n    if (input.error.kind === \"IndexedReferenceTypeError\") {\n      return Conversion.toBytes(input.error.raw, Evm.Utils.WORD_SIZE);\n    } else {\n      return undefined;\n    }\n  }\n  //otherwise, just dispath to encodeBasic\n  return BasicEncode.encodeBasic(input);\n  //...of course, really here we should be checking\n  //whether the input *is* a basic type, and if not, handling\n  //that appropriately!  But so far we don't need this, so this\n  //part of the function isn't implemented yet\n}\n\nexports.encodeTopic = encodeTopic;","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","Conversion","__importStar","Evm","BasicEncode","encodeTopic","input","kind","error","toBytes","raw","Utils","WORD_SIZE","undefined","encodeBasic","exports"],"sources":["../../../../lib/topic/encode/index.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAMC,KAAK,GAAG,IAAAH,OAAA,CAAAI,OAAW,EAAC,oBAAoB,CAAC;AAG/C,MAAAC,UAAA,GAAAC,YAAA,CAAAJ,OAAA;AACA,MAAAK,GAAA,GAAAD,YAAA,CAAAJ,OAAA;AACA,MAAAM,WAAA,GAAAF,YAAA,CAAAJ,OAAA;AAEA;;;;;AAKA,SAAgBO,WAAWA,CACzBC,KAA2B;EAE3B;EACA,IAAIA,KAAK,CAACC,IAAI,KAAK,OAAO,EAAE;IAC1BR,KAAK,CAAC,WAAW,EAAEO,KAAK,CAAC;IACzB;IACA;IACA,IAAIA,KAAK,CAACE,KAAK,CAACD,IAAI,KAAK,2BAA2B,EAAE;MACpD,OAAON,UAAU,CAACQ,OAAO,CAACH,KAAK,CAACE,KAAK,CAACE,GAAG,EAAEP,GAAG,CAACQ,KAAK,CAACC,SAAS,CAAC;KAChE,MAAM;MACL,OAAOC,SAAS;;;EAGpB;EACA,OAAOT,WAAW,CAACU,WAAW,CAACR,KAAK,CAAC;EACrC;EACA;EACA;EACA;AACF;;AApBAS,OAAA,CAAAV,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}