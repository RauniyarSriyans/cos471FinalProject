{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/compile-common/src/types.ts"],"sourcesContent":["import type { Abi, ImmutableReferences } from \"@truffle/contract-schema/spec\";\n\nexport type Compilation = {\n  sourceIndexes: string[]; //note: does not include internal sources\n  sources: Source[]; //note: does not include internal sources\n  contracts: CompiledContract[];\n  compiler: {\n    name: string | undefined;\n    version: string | undefined;\n  };\n  db?: {};\n};\n\nexport type Source = {\n  sourcePath: string;\n  contents: string;\n  ast?: object;\n  legacyAST?: object;\n  language: string;\n};\n\nexport interface CompilerResult {\n  compilations: Compilation[];\n}\n\nexport interface Bytecode {\n  bytes: string;\n  linkReferences: LinkReference[];\n}\n\nexport interface LinkReference {\n  offsets: number[];\n  name: string | null; // this will be the contractName of the library or some other identifier\n  length: number;\n}\n\nexport interface GeneratedSource {\n  id: number;\n  name: string;\n  language: string;\n  contents: string;\n  ast: any;\n}\n\nexport type CompiledContract = {\n  contractName: string;\n  sourcePath: string;\n  source: string;\n  sourceMap: string;\n  deployedSourceMap: string;\n  legacyAST?: object;\n  ast?: object;\n  abi: Abi;\n  metadata: string;\n  bytecode?: Bytecode;\n  deployedBytecode?: Bytecode;\n  compiler: {\n    name: string;\n    version: string;\n  };\n  devdoc: object;\n  userdoc: object;\n  immutableReferences: ImmutableReferences;\n  generatedSources?: GeneratedSource[];\n  deployedGeneratedSources?: GeneratedSource[];\n  db?: {};\n};\n\nexport interface WorkflowCompileResult {\n  compilations: Compilation[];\n  contracts: CompiledContract[];\n}\n\nexport interface Compiler {\n  all: (options: object) => Promise<CompilerResult>;\n\n  necessary: (options: object) => Promise<CompilerResult>;\n\n  sources: ({\n    sources,\n    options\n  }: {\n    sources: object;\n    options: object;\n  }) => Promise<CompilerResult>;\n\n  sourcesWithDependencies: ({\n    paths,\n    options\n  }: {\n    paths: string[];\n    options: object;\n  }) => Promise<CompilerResult>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}