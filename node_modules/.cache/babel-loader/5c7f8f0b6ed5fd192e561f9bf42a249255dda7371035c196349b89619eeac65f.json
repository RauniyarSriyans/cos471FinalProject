{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsArbitrary = exports.isArbitrary = exports.Arbitrary = void 0;\nconst Stream_1 = require(\"../../../stream/Stream\");\nconst symbols_1 = require(\"../../symbols\");\nconst Value_1 = require(\"./Value\");\nclass Arbitrary {\n  filter(refinement) {\n    return new FilterArbitrary(this, refinement);\n  }\n  map(mapper, unmapper) {\n    return new MapArbitrary(this, mapper, unmapper);\n  }\n  chain(chainer) {\n    return new ChainArbitrary(this, chainer);\n  }\n  noShrink() {\n    return new NoShrinkArbitrary(this);\n  }\n  noBias() {\n    return new NoBiasArbitrary(this);\n  }\n}\nexports.Arbitrary = Arbitrary;\nclass ChainArbitrary extends Arbitrary {\n  constructor(arb, chainer) {\n    super();\n    this.arb = arb;\n    this.chainer = chainer;\n  }\n  generate(mrng, biasFactor) {\n    const clonedMrng = mrng.clone();\n    const src = this.arb.generate(mrng, biasFactor);\n    return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n  }\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return (!context.stoppedForOriginal ? this.arb.shrink(context.originalValue, context.originalContext).map(v => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias)) : Stream_1.Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map(dst => {\n        const newContext = Object.assign(Object.assign({}, context), {\n          chainedContext: dst.context,\n          stoppedForOriginal: true\n        });\n        return new Value_1.Value(dst.value_, newContext);\n      }));\n    }\n    return Stream_1.Stream.nil();\n  }\n  valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n    const chainedArbitrary = this.chainer(v.value_);\n    const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n    const context = {\n      originalBias: biasFactor,\n      originalValue: v.value_,\n      originalContext: v.context,\n      stoppedForOriginal: false,\n      chainedArbitrary,\n      chainedContext: dst.context,\n      clonedMrng\n    };\n    return new Value_1.Value(dst.value_, context);\n  }\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalBias' in context && 'originalValue' in context && 'originalContext' in context && 'stoppedForOriginal' in context && 'chainedArbitrary' in context && 'chainedContext' in context && 'clonedMrng' in context;\n  }\n}\nclass MapArbitrary extends Arbitrary {\n  constructor(arb, mapper, unmapper) {\n    super();\n    this.arb = arb;\n    this.mapper = mapper;\n    this.unmapper = unmapper;\n    this.bindValueMapper = this.valueMapper.bind(this);\n  }\n  generate(mrng, biasFactor) {\n    const g = this.arb.generate(mrng, biasFactor);\n    return this.valueMapper(g);\n  }\n  canShrinkWithoutContext(value) {\n    if (this.unmapper !== undefined) {\n      try {\n        const unmapped = this.unmapper(value);\n        return this.arb.canShrinkWithoutContext(unmapped);\n      } catch (_err) {\n        return false;\n      }\n    }\n    return false;\n  }\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n    }\n    if (this.unmapper !== undefined) {\n      const unmapped = this.unmapper(value);\n      return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n    }\n    return Stream_1.Stream.nil();\n  }\n  mapperWithCloneIfNeeded(v) {\n    const sourceValue = v.value;\n    const mappedValue = this.mapper(sourceValue);\n    if (v.hasToBeCloned && (typeof mappedValue === 'object' && mappedValue !== null || typeof mappedValue === 'function') && Object.isExtensible(mappedValue) && !(0, symbols_1.hasCloneMethod)(mappedValue)) {\n      Object.defineProperty(mappedValue, symbols_1.cloneMethod, {\n        get: () => () => this.mapperWithCloneIfNeeded(v)[0]\n      });\n    }\n    return [mappedValue, sourceValue];\n  }\n  valueMapper(v) {\n    const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n    const context = {\n      originalValue: sourceValue,\n      originalContext: v.context\n    };\n    return new Value_1.Value(mappedValue, context);\n  }\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalValue' in context && 'originalContext' in context;\n  }\n}\nclass FilterArbitrary extends Arbitrary {\n  constructor(arb, refinement) {\n    super();\n    this.arb = arb;\n    this.refinement = refinement;\n    this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n  }\n  generate(mrng, biasFactor) {\n    while (true) {\n      const g = this.arb.generate(mrng, biasFactor);\n      if (this.refinementOnValue(g)) {\n        return g;\n      }\n    }\n  }\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n  }\n  shrink(value, context) {\n    return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n  }\n  refinementOnValue(v) {\n    return this.refinement(v.value);\n  }\n}\nclass NoShrinkArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n  generate(mrng, biasFactor) {\n    return this.arb.generate(mrng, biasFactor);\n  }\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n  shrink(_value, _context) {\n    return Stream_1.Stream.nil();\n  }\n  noShrink() {\n    return this;\n  }\n}\nclass NoBiasArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n  generate(mrng, _biasFactor) {\n    return this.arb.generate(mrng, undefined);\n  }\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n  shrink(value, context) {\n    return this.arb.shrink(value, context);\n  }\n  noBias() {\n    return this;\n  }\n}\nfunction isArbitrary(instance) {\n  return typeof instance === 'object' && instance !== null && 'generate' in instance && 'shrink' in instance && 'canShrinkWithoutContext' in instance;\n}\nexports.isArbitrary = isArbitrary;\nfunction assertIsArbitrary(instance) {\n  if (!isArbitrary(instance)) {\n    throw new Error('Unexpected value received: not an instance of Arbitrary');\n  }\n}\nexports.assertIsArbitrary = assertIsArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","assertIsArbitrary","isArbitrary","Arbitrary","Stream_1","require","symbols_1","Value_1","filter","refinement","FilterArbitrary","map","mapper","unmapper","MapArbitrary","chain","chainer","ChainArbitrary","noShrink","NoShrinkArbitrary","noBias","NoBiasArbitrary","constructor","arb","generate","mrng","biasFactor","clonedMrng","clone","src","valueChainer","canShrinkWithoutContext","shrink","context","isSafeContext","stoppedForOriginal","originalValue","originalContext","v","originalBias","Stream","nil","join","chainedArbitrary","chainedContext","dst","newContext","assign","Value","value_","generateMrng","bindValueMapper","valueMapper","bind","g","undefined","unmapped","_err","mapperWithCloneIfNeeded","sourceValue","mappedValue","hasToBeCloned","isExtensible","hasCloneMethod","cloneMethod","get","bindRefinementOnValue","refinementOnValue","_value","_context","_biasFactor","instance","Error"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/check/arbitrary/definition/Arbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsArbitrary = exports.isArbitrary = exports.Arbitrary = void 0;\nconst Stream_1 = require(\"../../../stream/Stream\");\nconst symbols_1 = require(\"../../symbols\");\nconst Value_1 = require(\"./Value\");\nclass Arbitrary {\n    filter(refinement) {\n        return new FilterArbitrary(this, refinement);\n    }\n    map(mapper, unmapper) {\n        return new MapArbitrary(this, mapper, unmapper);\n    }\n    chain(chainer) {\n        return new ChainArbitrary(this, chainer);\n    }\n    noShrink() {\n        return new NoShrinkArbitrary(this);\n    }\n    noBias() {\n        return new NoBiasArbitrary(this);\n    }\n}\nexports.Arbitrary = Arbitrary;\nclass ChainArbitrary extends Arbitrary {\n    constructor(arb, chainer) {\n        super();\n        this.arb = arb;\n        this.chainer = chainer;\n    }\n    generate(mrng, biasFactor) {\n        const clonedMrng = mrng.clone();\n        const src = this.arb.generate(mrng, biasFactor);\n        return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return (!context.stoppedForOriginal\n                ? this.arb\n                    .shrink(context.originalValue, context.originalContext)\n                    .map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias))\n                : Stream_1.Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {\n                const newContext = Object.assign(Object.assign({}, context), { chainedContext: dst.context, stoppedForOriginal: true });\n                return new Value_1.Value(dst.value_, newContext);\n            }));\n        }\n        return Stream_1.Stream.nil();\n    }\n    valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n        const chainedArbitrary = this.chainer(v.value_);\n        const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n        const context = {\n            originalBias: biasFactor,\n            originalValue: v.value_,\n            originalContext: v.context,\n            stoppedForOriginal: false,\n            chainedArbitrary,\n            chainedContext: dst.context,\n            clonedMrng,\n        };\n        return new Value_1.Value(dst.value_, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalBias' in context &&\n            'originalValue' in context &&\n            'originalContext' in context &&\n            'stoppedForOriginal' in context &&\n            'chainedArbitrary' in context &&\n            'chainedContext' in context &&\n            'clonedMrng' in context);\n    }\n}\nclass MapArbitrary extends Arbitrary {\n    constructor(arb, mapper, unmapper) {\n        super();\n        this.arb = arb;\n        this.mapper = mapper;\n        this.unmapper = unmapper;\n        this.bindValueMapper = this.valueMapper.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        const g = this.arb.generate(mrng, biasFactor);\n        return this.valueMapper(g);\n    }\n    canShrinkWithoutContext(value) {\n        if (this.unmapper !== undefined) {\n            try {\n                const unmapped = this.unmapper(value);\n                return this.arb.canShrinkWithoutContext(unmapped);\n            }\n            catch (_err) {\n                return false;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n        }\n        if (this.unmapper !== undefined) {\n            const unmapped = this.unmapper(value);\n            return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n        }\n        return Stream_1.Stream.nil();\n    }\n    mapperWithCloneIfNeeded(v) {\n        const sourceValue = v.value;\n        const mappedValue = this.mapper(sourceValue);\n        if (v.hasToBeCloned &&\n            ((typeof mappedValue === 'object' && mappedValue !== null) || typeof mappedValue === 'function') &&\n            Object.isExtensible(mappedValue) &&\n            !(0, symbols_1.hasCloneMethod)(mappedValue)) {\n            Object.defineProperty(mappedValue, symbols_1.cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });\n        }\n        return [mappedValue, sourceValue];\n    }\n    valueMapper(v) {\n        const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n        const context = { originalValue: sourceValue, originalContext: v.context };\n        return new Value_1.Value(mappedValue, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalValue' in context &&\n            'originalContext' in context);\n    }\n}\nclass FilterArbitrary extends Arbitrary {\n    constructor(arb, refinement) {\n        super();\n        this.arb = arb;\n        this.refinement = refinement;\n        this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        while (true) {\n            const g = this.arb.generate(mrng, biasFactor);\n            if (this.refinementOnValue(g)) {\n                return g;\n            }\n        }\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n    }\n    refinementOnValue(v) {\n        return this.refinement(v.value);\n    }\n}\nclass NoShrinkArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        return this.arb.generate(mrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(_value, _context) {\n        return Stream_1.Stream.nil();\n    }\n    noShrink() {\n        return this;\n    }\n}\nclass NoBiasArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, _biasFactor) {\n        return this.arb.generate(mrng, undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context);\n    }\n    noBias() {\n        return this;\n    }\n}\nfunction isArbitrary(instance) {\n    return (typeof instance === 'object' &&\n        instance !== null &&\n        'generate' in instance &&\n        'shrink' in instance &&\n        'canShrinkWithoutContext' in instance);\n}\nexports.isArbitrary = isArbitrary;\nfunction assertIsArbitrary(instance) {\n    if (!isArbitrary(instance)) {\n        throw new Error('Unexpected value received: not an instance of Arbitrary');\n    }\n}\nexports.assertIsArbitrary = assertIsArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}