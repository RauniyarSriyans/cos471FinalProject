{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integerCases = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:wrap:integer\");\nconst Format = __importStar(require(\"../format\"));\nconst dispatch_1 = require(\"./dispatch\");\nconst errors_1 = require(\"./errors\");\nconst Conversion = __importStar(require(\"../conversion\"));\nconst Utils = __importStar(require(\"./utils\"));\nconst Messages = __importStar(require(\"./messages\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst big_js_1 = __importDefault(require(\"big.js\"));\nconst bytes_1 = require(\"./bytes\");\n//NOTE: all cases called \"integerFrom...\" also work for enums.\n//The cases labeled \"enumFrom...\" work only for enums.\n//there are no cases that work only for integers and not enums,\n//because we always want input for integers to also be valid for enums.\nconst integerFromStringCases = [integerFromIntegerString, enumFromNameString, integerFromScientificOrUnits, integerFromNegatedBaseString, integerFromStringFailureCase];\n//note: doesn't include UDVT case,\n//or error case\nconst integerFromWrappedValueCases = [integerFromCodecIntegerValue, integerFromCodecEnumValue, integerFromCodecDecimalValue];\nconst integerCasesBasic = [...integerFromStringCases, integerFromNumber, integerFromBoxedNumber, integerFromBoxedString, integerFromBigint, integerFromBN, integerFromBig, integerFromUint8ArrayLike, ...integerFromWrappedValueCases, integerFromCodecEnumError, integerFromCodecUdvtValue, integerFromOther //must go last!\n];\n\nexports.integerCases = [integerFromIntegerTypeValueInput, enumFromEnumTypeValueInput, ...integerCasesBasic];\nfunction* integerFromIntegerString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n  if (input.trim() === \"\") {\n    //bigint accepts this but we shouldn't\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n  }\n  const stripped = Utils.removeUnderscoresNumeric(input);\n  let asBN;\n  try {\n    //we'll use BigInt to parse integer strings, as it's pretty good at it.\n    //Note that it accepts hex/octal/binary with prefixes 0x, 0o, 0b.\n    const asBigInt = BigInt(stripped);\n    asBN = Conversion.toBN(asBigInt);\n  } catch (_a) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input string was not an integer string\");\n  }\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n//this case handles both scientific notation, and numbers with units\nfunction* integerFromScientificOrUnits(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n  if (input.trim() === \"\") {\n    //the code below accepts this but we shouldn't\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1,\n    //only specificity 1 since it's already specificity 5 above\n    dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n  }\n  const stripped = Utils.removeUnderscoresNoHex(input);\n  let [_, quantityString, unit] = stripped.match(/^(.*?)(|wei|gwei|shannon|finney|szabo|ether)\\s*$/i); //units will be case insensitive; note this always matches\n  quantityString = quantityString.trim(); //Big rejects whitespace, let's allow it\n  const unitPlacesTable = {\n    //we could accept all of web3's units here, but, that's a little much;\n    //we'll just accept the most common ones\n    \"\": 0,\n    wei: 0,\n    gwei: 9,\n    shannon: 9,\n    szabo: 12,\n    finney: 15,\n    ether: 18\n  };\n  let quantity;\n  try {\n    quantity = quantityString.match(/^\\s*$/) ? new big_js_1.default(1) //allow just \"ether\" e.g.\n    : new big_js_1.default(quantityString);\n  } catch (_a) {\n    quantity = null;\n  }\n  if (quantity === null) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string using scientific notation or units\");\n  }\n  const places = unitPlacesTable[unit.toLowerCase()];\n  const asBig = Conversion.shiftBigUp(quantity, places);\n  if (Conversion.countDecimalPlaces(asBig) !== 0) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, unit !== \"\" ? \"Input numeric value was not an integral number of wei\" : Messages.nonIntegerMessage);\n  }\n  const asBN = Conversion.toBN(asBig);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromNegatedBaseString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n  if (!input.match(/^\\s*-/)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a negated numeric string\");\n  }\n  const stripped = Utils.removeUnderscoresNumeric(input);\n  let positiveAsBN;\n  const [_, positiveString] = stripped.match(/^\\s*-(.*)$/);\n  try {\n    const positive = BigInt(positiveString);\n    positiveAsBN = Conversion.toBN(positive);\n  } catch (_a) {\n    positiveAsBN = null;\n  }\n  if (positiveAsBN === null || positiveString === \"\" || positiveString.match(/^(-|\\s)/)) {\n    //no double negation, no bare \"-\", and no space after the minus!\n    //(we do this as a string check, rather than checking if\n    //positiveAsBN is >=0, in order to prevent entering e.g. \"--\" or \"- 2\")\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.nonNumericMessage);\n  }\n  const asBN = positiveAsBN.neg();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* enumFromNameString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n  if (dataType.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.nonNumericMessage);\n  }\n  const fullType = Format.Types.fullType(dataType, wrapOptions.userDefinedTypes);\n  const options = fullType.options;\n  const components = input.split(\".\");\n  const finalComponent = components[components.length - 1];\n  debug(\"components: %O\", components);\n  debug(\"dataType: %O\", dataType);\n  debug(\"options: %O\", options);\n  //the enum can be qualified.  if it's qualified, does the type match?\n  let matchingType;\n  switch (components.length) {\n    case 1:\n      //not qualified, automatically matches\n      matchingType = true;\n      break;\n    case 2:\n      //qualified by type name, does it match?\n      matchingType = components[0] === dataType.typeName;\n      break;\n    case 3:\n      //qualified by type name and contract name, does it match?\n      matchingType = dataType.kind === \"local\" && components[0] === dataType.definingContractName && components[1] === dataType.typeName;\n      break;\n    default:\n      //no valid reason to have 3 or more periods\n      //(and split cannot return an empty array)\n      matchingType = false;\n  }\n  debug(\"matchingType: %O\", matchingType);\n  const numeric = matchingType ? options.indexOf(finalComponent) : -1; //if type doesn't match, just indicate error\n  debug(\"numeric: %d\", numeric);\n  if (numeric === -1) {\n    //-1 comes from either our setting it manually above to indicate error,\n    //or from a failed indexOf call\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.badEnumMessage);\n  }\n  const asBN = new bn_js_1.default(numeric); //whew!\n  //now: unlike in every other case, we can skip validation!\n  //so let's just wrap and return!\n  return {\n    type: dataType,\n    kind: \"value\",\n    value: {\n      numericAsBN: asBN,\n      name: finalComponent //we know it matches!\n    }\n  };\n}\n\nfunction* integerFromStringFailureCase(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n  throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 4, dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n}\nfunction* integerFromBN(dataType, input, wrapOptions) {\n  if (!bn_js_1.default.isBN(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a BN\");\n  }\n  const asBN = input.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromBigint(dataType, input, wrapOptions) {\n  if (typeof input !== \"bigint\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a bigint\");\n  }\n  const asBN = Conversion.toBN(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromNumber(dataType, input, wrapOptions) {\n  if (typeof input !== \"number\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a number\");\n  }\n  if (!Number.isInteger(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonIntegerMessage);\n  }\n  if (!Number.isSafeInteger(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonSafeMessage);\n  }\n  const asBN = new bn_js_1.default(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromBig(dataType, input, wrapOptions) {\n  if (!Conversion.isBig(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a Big\");\n  }\n  if (Conversion.countDecimalPlaces(input) !== 0) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonIntegerMessage);\n  }\n  const asBN = Conversion.toBN(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromUint8ArrayLike(dataType, input, wrapOptions) {\n  if (!Utils.isUint8ArrayLike(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a Uint8Array-like\");\n  }\n  //the next series of checks is delegated to a helper fn\n  (0, bytes_1.validateUint8ArrayLike)(input, dataType, wrapOptions.name); //(this fn just throws an appropriate error if something's bad)\n  const asBN = Conversion.toBN(new Uint8Array(input)); //I am surprised TS accepts this!\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromBoxedNumber(dataType, input, wrapOptions) {\n  if (!Utils.isBoxedNumber(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a boxed number\");\n  }\n  //unbox and try again\n  return yield* integerFromNumber(dataType, input.valueOf(), wrapOptions);\n}\nfunction* integerFromBoxedString(dataType, input, wrapOptions) {\n  if (!Utils.isBoxedString(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a boxed string\");\n  }\n  //unbox and try again\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.valueOf(), wrapOptions, integerFromStringCases);\n}\nfunction* integerFromCodecIntegerValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n  if (input.type.typeClass !== \"int\" && input.type.typeClass !== \"uint\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n  if (!wrapOptions.loose && (input.type.typeClass !== dataType.typeClass || input.type.bits !== dataType.bits)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  const asBN = input.value.asBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromCodecDecimalValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n  if (input.type.typeClass !== \"fixed\" && input.type.typeClass !== \"ufixed\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n  if (!wrapOptions.loose) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  const asBN = Conversion.toBN(input.value.asBig);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromCodecEnumValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n  if (input.type.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1,\n    //only specificity 1 due to EnumError case\n    Messages.errorResultMessage);\n  }\n  if (!wrapOptions.loose && (dataType.typeClass !== \"enum\" || input.type.id !== dataType.id)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  const asBN = input.value.numericAsBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromCodecEnumError(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n  if (input.type.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  if (input.kind !== \"error\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Wrapped result was a value rather than an error\");\n  }\n  if (!wrapOptions.loose && (dataType.typeClass !== \"enum\" || input.type.id !== dataType.id)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n  const coercedInput = input;\n  //only one specific kind of error will be allowed\n  if (coercedInput.error.kind !== \"EnumOutOfRangeError\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n  const asBN = coercedInput.error.rawAsBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction* integerFromCodecUdvtValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n  if (input.type.typeClass !== \"userDefinedValueType\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.wrappedTypeMessage(input.type));\n  }\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, wrapOptions, integerFromWrappedValueCases);\n}\nfunction* integerFromIntegerTypeValueInput(dataType, input, wrapOptions) {\n  if (!Utils.isTypeValueInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a type/value pair\");\n  }\n  if (!input.type.match(/^u?int\\d*$/)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, dataType.typeClass === \"enum\" ? 1 : 5,\n    //use specificity 5 when getting an integer (which have no alternative),\n    //but specificity 1 when getting an enum (which have enum type/value input also)\n    Messages.specifiedTypeMessage(input.type));\n  }\n  const [_, typeClass, bitsAsString] = input.type.match(/^(u?int)(\\d*)$/);\n  const bits = bitsAsString ? Number(bitsAsString) : 256; //defaults to 256\n  //(not using the WORD_SIZE constant due to fixed types bringing its applicability\n  //here into question)\n  const requiredTypeClass = dataType.typeClass !== \"enum\" ? dataType.typeClass : \"uint\"; //allow underlying uint type to work for enums\n  //(we handle \"enum\" given as type in a separate case below)\n  const requiredBits = dataType.typeClass !== \"enum\" ? dataType.bits : 8 * Math.ceil(Math.log2(Format.Types.fullType(dataType, wrapOptions.userDefinedTypes).options.length) / 8); //compute required bits for enum type (sorry)\n  if (requiredTypeClass !== typeClass || requiredBits !== bits) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.specifiedTypeMessage(input.type));\n  }\n  //extract value & try again, with loose option turned on\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, Object.assign(Object.assign({}, wrapOptions), {\n    loose: true\n  }), integerCasesBasic);\n}\nfunction* enumFromEnumTypeValueInput(dataType, input, wrapOptions) {\n  if (!Utils.isTypeValueInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a type/value pair\");\n  }\n  if (input.type !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, dataType.typeClass === \"enum\" ? 5 : 1,\n    //use specificity 5 when getting an enum (which will have also failed integer type/value input),\n    //but specificity 1 when getting an integer (to which this doesn't really apply)\n    Messages.specifiedTypeMessage(input.type));\n  }\n  if (dataType.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.specifiedTypeMessage(input.type));\n  }\n  //extract value & try again, with loose option turned on\n  //(we'll also coerce the type on this one since we know it's\n  //going to be an enum value :P )\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, Object.assign(Object.assign({}, wrapOptions), {\n    loose: true\n  }), integerCasesBasic);\n}\nfunction* integerFromOther(dataType, input, wrapOptions) {\n  const request = {\n    kind: \"integer\",\n    input\n  };\n  const response = yield request;\n  if (response.kind !== \"integer\") {\n    throw new errors_1.BadResponseTypeError(request, response);\n  }\n  if (response.value === null) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, response.partiallyRecognized ? 5 : 3, response.reason || Messages.unrecognizedNumberMessage(dataType));\n  }\n  const asBN = Conversion.toBN(response.value);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\nfunction validateAndWrap(dataType, asBN, wrapOptions, input //just for erroring\n) {\n  switch (dataType.typeClass) {\n    case \"uint\":\n      if (asBN.isNeg() || asBN.bitLength() > dataType.bits) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeMessage);\n      }\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN\n        }\n      };\n    case \"int\":\n      if (!asBN.isNeg() && asBN.bitLength() >= dataType.bits ||\n      //>= since signed\n      asBN.isNeg() && asBN.neg().subn(1).bitLength() >= dataType.bits\n      //bitLength doesn't work great for negatives so we do this instead\n      ) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeMessage);\n      }\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN\n        }\n      };\n    case \"enum\":\n      const fullType = Format.Types.fullType(dataType, wrapOptions.userDefinedTypes);\n      if (asBN.isNeg() || asBN.gten(fullType.options.length)) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeEnumMessage);\n      }\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          numericAsBN: asBN,\n          name: fullType.options[asBN.toNumber()]\n        }\n      };\n  }\n}","map":{"version":3,"names":["debug_1","__importDefault","require","debug","default","Format","__importStar","dispatch_1","errors_1","Conversion","Utils","Messages","bn_js_1","big_js_1","bytes_1","integerFromStringCases","integerFromIntegerString","enumFromNameString","integerFromScientificOrUnits","integerFromNegatedBaseString","integerFromStringFailureCase","integerFromWrappedValueCases","integerFromCodecIntegerValue","integerFromCodecEnumValue","integerFromCodecDecimalValue","integerCasesBasic","integerFromNumber","integerFromBoxedNumber","integerFromBoxedString","integerFromBigint","integerFromBN","integerFromBig","integerFromUint8ArrayLike","integerFromCodecEnumError","integerFromCodecUdvtValue","integerFromOther","exports","integerCases","integerFromIntegerTypeValueInput","enumFromEnumTypeValueInput","dataType","input","wrapOptions","TypeMismatchError","name","trim","typeClass","badEnumMessage","nonNumericMessage","stripped","removeUnderscoresNumeric","asBN","asBigInt","BigInt","toBN","_a","validateAndWrap","removeUnderscoresNoHex","_","quantityString","unit","match","unitPlacesTable","wei","gwei","shannon","szabo","finney","ether","quantity","places","toLowerCase","asBig","shiftBigUp","countDecimalPlaces","nonIntegerMessage","positiveAsBN","positiveString","positive","neg","fullType","Types","userDefinedTypes","options","components","split","finalComponent","length","matchingType","typeName","kind","definingContractName","numeric","indexOf","type","value","numericAsBN","isBN","clone","Number","isInteger","isSafeInteger","nonSafeMessage","isBig","isUint8ArrayLike","validateUint8ArrayLike","Uint8Array","isBoxedNumber","valueOf","isBoxedString","wrapWithCases","isWrappedResult","wrappedTypeMessage","errorResultMessage","loose","bits","id","coercedInput","error","rawAsBN","isTypeValueInput","specifiedTypeMessage","bitsAsString","requiredTypeClass","requiredBits","Math","ceil","log2","Object","assign","request","response","BadResponseTypeError","partiallyRecognized","reason","unrecognizedNumberMessage","isNeg","bitLength","outOfRangeMessage","subn","gten","outOfRangeEnumMessage","toNumber"],"sources":["../../../lib/wrap/integer.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}