{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Web3Shim = void 0;\nconst web3_1 = __importDefault(require(\"web3\"));\nconst ethereum_1 = require(\"./overloads/ethereum\");\nconst quorum_1 = require(\"./overloads/quorum\");\nconst fabric_evm_1 = require(\"./overloads/fabric-evm\");\nconst web3js_1 = require(\"./overloads/web3js\");\nconst initInterface = web3Shim => __awaiter(void 0, void 0, void 0, function* () {\n  const networkTypes = new Map(Object.entries({\n    \"web3js\": web3js_1.Web3JsDefinition,\n    \"ethereum\": ethereum_1.EthereumDefinition,\n    \"quorum\": quorum_1.QuorumDefinition,\n    \"fabric-evm\": fabric_evm_1.FabricEvmDefinition\n  }));\n  networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n});\n// March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `@truffle/interface-adapter`that should use this work in a more\n// sane and organized manner.\nclass Web3Shim extends web3_1.default {\n  constructor(options) {\n    super();\n    if (options) {\n      this.networkType = options.networkType || \"ethereum\";\n      if (options.provider) {\n        this.setProvider(options.provider);\n      }\n    } else {\n      this.networkType = \"ethereum\";\n    }\n    initInterface(this);\n  }\n  setNetworkType(networkType) {\n    this.networkType = networkType;\n    initInterface(this);\n  }\n}\nexports.Web3Shim = Web3Shim;","map":{"version":3,"names":["web3_1","__importDefault","require","ethereum_1","quorum_1","fabric_evm_1","web3js_1","initInterface","web3Shim","__awaiter","networkTypes","Map","Object","entries","Web3JsDefinition","EthereumDefinition","QuorumDefinition","FabricEvmDefinition","get","networkType","initNetworkType","Web3Shim","default","constructor","options","provider","setProvider","setNetworkType","exports"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/@truffle/interface-adapter/lib/shim/index.ts"],"sourcesContent":["import Web3 from \"web3\";\nimport type { provider as Provider } from \"web3-core/types\";\n\nimport { EthereumDefinition } from \"./overloads/ethereum\";\nimport { QuorumDefinition } from \"./overloads/quorum\";\nimport { FabricEvmDefinition } from \"./overloads/fabric-evm\";\nimport { Web3JsDefinition } from \"./overloads/web3js\";\n\nconst initInterface = async (web3Shim: Web3Shim) => {\n  const networkTypes: NetworkTypesConfig = new Map(\n    Object.entries({\n      \"web3js\": Web3JsDefinition,\n      \"ethereum\": EthereumDefinition,\n      \"quorum\": QuorumDefinition,\n      \"fabric-evm\": FabricEvmDefinition\n    })\n  );\n\n  networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n};\n\n// March 13, 2019 - Mike Seese:\n// This is a temporary shim to support the basic, Ethereum-based\n// multiledger integration. This whole adapter, including this shim,\n// will undergo better architecture before TruffleCon to support\n// other non-Ethereum-based ledgers.\n\nexport type NetworkType = string;\n\nexport interface Web3ShimOptions {\n  provider?: Provider;\n  networkType?: NetworkType;\n}\n\nexport type InitNetworkType = (web3Shim: Web3Shim) => Promise<void>;\n\nexport interface NetworkTypeDefinition {\n  initNetworkType: InitNetworkType;\n}\n\nexport type NetworkTypesConfig = Map<NetworkType, NetworkTypeDefinition>;\n\n// March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `@truffle/interface-adapter`that should use this work in a more\n// sane and organized manner.\nexport class Web3Shim extends Web3 {\n  public networkType: NetworkType;\n\n  constructor(options?: Web3ShimOptions) {\n    super();\n\n    if (options) {\n      this.networkType = options.networkType || \"ethereum\";\n\n      if (options.provider) {\n        this.setProvider(options.provider);\n      }\n    } else {\n      this.networkType = \"ethereum\";\n    }\n\n    initInterface(this);\n  }\n\n  public setNetworkType(networkType: NetworkType) {\n    this.networkType = networkType;\n    initInterface(this);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,MAAA,GAAAC,eAAA,CAAAC,OAAA;AAGA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AACA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,QAAA,GAAAJ,OAAA;AAEA,MAAMK,aAAa,GAAUC,QAAkB,IAAIC,SAAA;EACjD,MAAMC,YAAY,GAAuB,IAAIC,GAAG,CAC9CC,MAAM,CAACC,OAAO,CAAC;IACb,QAAQ,EAAEP,QAAA,CAAAQ,gBAAgB;IAC1B,UAAU,EAAEX,UAAA,CAAAY,kBAAkB;IAC9B,QAAQ,EAAEX,QAAA,CAAAY,gBAAgB;IAC1B,YAAY,EAAEX,YAAA,CAAAY;GACf,CAAC,CACH;EAEDP,YAAY,CAACQ,GAAG,CAACV,QAAQ,CAACW,WAAW,CAAC,CAACC,eAAe,CAACZ,QAAQ,CAAC;AAClE,CAAC;AAuBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAaa,QAAS,SAAQrB,MAAA,CAAAsB,OAAI;EAGhCC,YAAYC,OAAyB;IACnC,KAAK,EAAE;IAEP,IAAIA,OAAO,EAAE;MACX,IAAI,CAACL,WAAW,GAAGK,OAAO,CAACL,WAAW,IAAI,UAAU;MAEpD,IAAIK,OAAO,CAACC,QAAQ,EAAE;QACpB,IAAI,CAACC,WAAW,CAACF,OAAO,CAACC,QAAQ,CAAC;;KAErC,MAAM;MACL,IAAI,CAACN,WAAW,GAAG,UAAU;;IAG/BZ,aAAa,CAAC,IAAI,CAAC;EACrB;EAEOoB,cAAcA,CAACR,WAAwB;IAC5C,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9BZ,aAAa,CAAC,IAAI,CAAC;EACrB;;AAtBFqB,OAAA,CAAAP,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}