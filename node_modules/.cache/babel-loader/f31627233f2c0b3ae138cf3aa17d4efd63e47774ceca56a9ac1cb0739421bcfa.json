{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.partsToUrlUnmapper = exports.partsToUrlMapper = void 0;\nfunction partsToUrlMapper(data) {\n  const [scheme, authority, path] = data;\n  const query = data[3] === null ? '' : `?${data[3]}`;\n  const fragments = data[4] === null ? '' : `#${data[4]}`;\n  return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nexports.partsToUrlMapper = partsToUrlMapper;\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nfunction partsToUrlUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Incompatible value received: type');\n  }\n  const m = UrlSplitRegex.exec(value);\n  if (m === null) {\n    throw new Error('Incompatible value received');\n  }\n  const scheme = m[1];\n  const authority = m[2];\n  const path = m[3];\n  const query = m[4];\n  const fragments = m[5];\n  return [scheme, authority, path, query !== undefined ? query.substring(1) : null, fragments !== undefined ? fragments.substring(1) : null];\n}\nexports.partsToUrlUnmapper = partsToUrlUnmapper;","map":{"version":3,"names":["Object","defineProperty","exports","value","partsToUrlUnmapper","partsToUrlMapper","data","scheme","authority","path","query","fragments","UrlSplitRegex","Error","m","exec","undefined","substring"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/mappers/PartsToUrl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partsToUrlUnmapper = exports.partsToUrlMapper = void 0;\nfunction partsToUrlMapper(data) {\n    const [scheme, authority, path] = data;\n    const query = data[3] === null ? '' : `?${data[3]}`;\n    const fragments = data[4] === null ? '' : `#${data[4]}`;\n    return `${scheme}://${authority}${path}${query}${fragments}`;\n}\nexports.partsToUrlMapper = partsToUrlMapper;\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nfunction partsToUrlUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Incompatible value received: type');\n    }\n    const m = UrlSplitRegex.exec(value);\n    if (m === null) {\n        throw new Error('Incompatible value received');\n    }\n    const scheme = m[1];\n    const authority = m[2];\n    const path = m[3];\n    const query = m[4];\n    const fragments = m[5];\n    return [\n        scheme,\n        authority,\n        path,\n        query !== undefined ? query.substring(1) : null,\n        fragments !== undefined ? fragments.substring(1) : null,\n    ];\n}\nexports.partsToUrlUnmapper = partsToUrlUnmapper;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AAC9D,SAASA,gBAAgBA,CAACC,IAAI,EAAE;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,EAAEC,IAAI,CAAC,GAAGH,IAAI;EACtC,MAAMI,KAAK,GAAGJ,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAI,IAAGA,IAAI,CAAC,CAAC,CAAE,EAAC;EACnD,MAAMK,SAAS,GAAGL,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAI,IAAGA,IAAI,CAAC,CAAC,CAAE,EAAC;EACvD,OAAQ,GAAEC,MAAO,MAAKC,SAAU,GAAEC,IAAK,GAAEC,KAAM,GAAEC,SAAU,EAAC;AAChE;AACAT,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAC3C,MAAMO,aAAa,GAAG,+HAA+H;AACrJ,SAASR,kBAAkBA,CAACD,KAAK,EAAE;EAC/B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIU,KAAK,CAAC,mCAAmC,CAAC;EACxD;EACA,MAAMC,CAAC,GAAGF,aAAa,CAACG,IAAI,CAACZ,KAAK,CAAC;EACnC,IAAIW,CAAC,KAAK,IAAI,EAAE;IACZ,MAAM,IAAID,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,MAAMN,MAAM,GAAGO,CAAC,CAAC,CAAC,CAAC;EACnB,MAAMN,SAAS,GAAGM,CAAC,CAAC,CAAC,CAAC;EACtB,MAAML,IAAI,GAAGK,CAAC,CAAC,CAAC,CAAC;EACjB,MAAMJ,KAAK,GAAGI,CAAC,CAAC,CAAC,CAAC;EAClB,MAAMH,SAAS,GAAGG,CAAC,CAAC,CAAC,CAAC;EACtB,OAAO,CACHP,MAAM,EACNC,SAAS,EACTC,IAAI,EACJC,KAAK,KAAKM,SAAS,GAAGN,KAAK,CAACO,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,EAC/CN,SAAS,KAAKK,SAAS,GAAGL,SAAS,CAACM,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAC1D;AACL;AACAf,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}