{"ast":null,"code":"\"use strict\";\n\n/**\n * # Truffle Codec\n *\n * This module provides low-level decoding and encoding functionality for\n * Solidity and the Solidity ABI.  Many parts of this module are intended\n * primarily for internal use by Truffle and so remain largely undocumented,\n * but some of its types are also output by @truffle/decoder, which provides\n * a higher-level interface to much of this module's functionality.\n *\n * ## If you're here from Truffle Decoder or Truffle Encoder\n *\n * If you're coming here from [[@truffle/decoder]] or [[@truffle/encoder]],\n * you probably just want to know about the parts that are relevant to you.\n * These are:\n *\n * * The \"data\" category (specifically [[Format]])\n * * The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n * * The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n *\n * Note that the data category is largely scarce in\n * documentation, although that's because it's largely self-explanatory.\n *\n * If you're not just here from Truffle Decoder or Encoder, but are actually\n * interested in the lower-level workings, read on.\n *\n * ## How this module differs from Truffle Decoder and Encoder\n *\n * Unlike Truffle Decoder and Encoder, this library makes no network connections\n * and avoids dependencies that do.  Instead, its decoding functionality\n * is generator-based; calling one of the decoding functions returns a\n * generator.  This generator's `next()` function may return a finished\n * result, or it may return a request for more information.  It is up to\n * the caller to fulfill these requests -- say, by making a network\n * connection of its own.  This is how @truffle/decoder and @truffle/encoder\n * work; @truffle/codec makes requests, while Decoder and Encoder fulfill them by\n * looking up the necessary information on the blockchain.\n *\n * This library also provides additional functionality beyond what's used by\n * Truffle Decoder and Encoder.  In particular, this library also exists to\n * support Truffle Debugger, and so it provides decoding functionality not just\n * for transactions, logs, and state variables, but also for Solidity variables\n * during transaction execution, including circularity detection for memroy\n * structures.  It includes functionality for decoding Solidity's internal\n * function pointers, which the debugger uses, but which Truffle Decoder\n * currently does not (although this is planned for the future).\n *\n * There is also functionality for decoding return values and revert messages\n * that goes beyond what's currently available in @truffle/decoder; this may get\n * a better interface in the future.\n *\n * ## How to use\n *\n * You should probably use [[@truffle/decoder]] or [[@truffle/encoder]]\n * instead, if your use case doesn't preclude it.  This module has little\n * documentation, where it has any at all, and it's likely that parts of its\n * interface may change (particularly regarding allocation).  That said, if you\n * truly need the functionality here, Truffle Decoder and Truffle Encoder can\n * perhaps serve as something of a reference implementation (and perhaps\n * Truffle Debugger as well, though that code is much harder to read or copy).\n *\n * @module @truffle/codec\n * @packageDocumentation\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wrap = exports.Export = exports.Evm = exports.Conversion = exports.Contexts = exports.Compilations = exports.Compiler = exports.Ast = exports.AstConstant = exports.Storage = exports.Stack = exports.Special = exports.Memory = exports.MappingKey = exports.Topic = exports.AbiData = exports.Bytes = exports.Basic = exports.abifyReturndataDecoding = exports.abifyLogDecoding = exports.abifyCalldataDecoding = exports.RepeatCompilationIdError = exports.NoProjectInfoError = exports.StopDecodingError = exports.DecodingError = exports.decodeRevert = exports.decodeReturndata = exports.decodeCalldata = exports.decodeEvent = exports.decodeVariable = exports.Format = void 0;\n//So, what shall codec export...?\n//First: export the data format\nconst Format = __importStar(require(\"./format\"));\nexports.Format = Format;\n//now... various low-level stuff we want to export!\n//the actual decoding functions and related errors\nvar core_1 = require(\"./core\");\nObject.defineProperty(exports, \"decodeVariable\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeVariable;\n  }\n});\nObject.defineProperty(exports, \"decodeEvent\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeEvent;\n  }\n});\nObject.defineProperty(exports, \"decodeCalldata\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeCalldata;\n  }\n});\nObject.defineProperty(exports, \"decodeReturndata\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeReturndata;\n  }\n});\nObject.defineProperty(exports, \"decodeRevert\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeRevert;\n  }\n});\nvar errors_1 = require(\"./errors\");\nObject.defineProperty(exports, \"DecodingError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.DecodingError;\n  }\n});\nObject.defineProperty(exports, \"StopDecodingError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.StopDecodingError;\n  }\n});\nObject.defineProperty(exports, \"NoProjectInfoError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.NoProjectInfoError;\n  }\n});\nObject.defineProperty(exports, \"RepeatCompilationIdError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.RepeatCompilationIdError;\n  }\n});\n__exportStar(require(\"./common\"), exports);\nvar abify_1 = require(\"./abify\");\nObject.defineProperty(exports, \"abifyCalldataDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyCalldataDecoding;\n  }\n});\nObject.defineProperty(exports, \"abifyLogDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyLogDecoding;\n  }\n});\nObject.defineProperty(exports, \"abifyReturndataDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyReturndataDecoding;\n  }\n});\n// data locations - common\nconst Basic = __importStar(require(\"./basic\"));\nexports.Basic = Basic;\nconst Bytes = __importStar(require(\"./bytes\"));\nexports.Bytes = Bytes;\n// data locations - abi\nconst AbiData = __importStar(require(\"./abi-data\"));\nexports.AbiData = AbiData;\nconst Topic = __importStar(require(\"./topic\"));\nexports.Topic = Topic;\n// data locations - solidity\nconst MappingKey = __importStar(require(\"./mapping-key\"));\nexports.MappingKey = MappingKey;\nconst Memory = __importStar(require(\"./memory\"));\nexports.Memory = Memory;\nconst Special = __importStar(require(\"./special\"));\nexports.Special = Special;\nconst Stack = __importStar(require(\"./stack\"));\nexports.Stack = Stack;\nconst Storage = __importStar(require(\"./storage\"));\nexports.Storage = Storage;\nconst AstConstant = __importStar(require(\"./ast-constant\"));\nexports.AstConstant = AstConstant;\nconst Ast = __importStar(require(\"./ast\"));\nexports.Ast = Ast;\nconst Compiler = __importStar(require(\"./compiler\"));\nexports.Compiler = Compiler;\nconst Compilations = __importStar(require(\"./compilations\"));\nexports.Compilations = Compilations;\nconst Contexts = __importStar(require(\"./contexts\"));\nexports.Contexts = Contexts;\nconst Conversion = __importStar(require(\"./conversion\"));\nexports.Conversion = Conversion;\nconst Evm = __importStar(require(\"./evm\"));\nexports.Evm = Evm;\nconst Export = __importStar(require(\"./export\"));\nexports.Export = Export;\nconst Wrap = __importStar(require(\"./wrap\"));\nexports.Wrap = Wrap;","map":{"version":3,"names":["Format","__importStar","require","exports","core_1","Object","defineProperty","enumerable","get","decodeVariable","decodeEvent","decodeCalldata","decodeReturndata","decodeRevert","errors_1","DecodingError","StopDecodingError","NoProjectInfoError","RepeatCompilationIdError","__exportStar","abify_1","abifyCalldataDecoding","abifyLogDecoding","abifyReturndataDecoding","Basic","Bytes","AbiData","Topic","MappingKey","Memory","Special","Stack","Storage","AstConstant","Ast","Compiler","Compilations","Contexts","Conversion","Evm","Export","Wrap"],"sources":["../../lib/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}