{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sentencesToParagraphUnmapper = exports.sentencesToParagraphMapper = exports.wordsToSentenceUnmapperFor = exports.wordsToSentenceMapper = exports.wordsToJoinedStringUnmapperFor = exports.wordsToJoinedStringMapper = void 0;\nfunction wordsToJoinedStringMapper(words) {\n  return words.map(w => w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w).join(' ');\n}\nexports.wordsToJoinedStringMapper = wordsToJoinedStringMapper;\nfunction wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n    const words = [];\n    for (const candidate of value.split(' ')) {\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n    return words;\n  };\n}\nexports.wordsToJoinedStringUnmapperFor = wordsToJoinedStringUnmapperFor;\nfunction wordsToSentenceMapper(words) {\n  let sentence = words.join(' ');\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexports.wordsToSentenceMapper = wordsToSentenceMapper;\nfunction wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n    const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    const words = [];\n    const candidates = adaptedValue.split(' ');\n    for (let idx = 0; idx !== candidates.length; ++idx) {\n      const candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n    return words;\n  };\n}\nexports.wordsToSentenceUnmapperFor = wordsToSentenceUnmapperFor;\nfunction sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\nexports.sentencesToParagraphMapper = sentencesToParagraphMapper;\nfunction sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n  const sentences = value.split('. ');\n  for (let idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n  return sentences;\n}\nexports.sentencesToParagraphUnmapper = sentencesToParagraphUnmapper;","map":{"version":3,"names":["Object","defineProperty","exports","value","sentencesToParagraphUnmapper","sentencesToParagraphMapper","wordsToSentenceUnmapperFor","wordsToSentenceMapper","wordsToJoinedStringUnmapperFor","wordsToJoinedStringMapper","words","map","w","length","substr","join","wordsArbitrary","wordsToJoinedStringUnmapper","Error","candidate","split","canShrinkWithoutContext","push","sentence","toUpperCase","substring","wordsToSentenceUnmapper","toLowerCase","adaptedValue","candidates","idx","sentences"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/mappers/WordsToLorem.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sentencesToParagraphUnmapper = exports.sentencesToParagraphMapper = exports.wordsToSentenceUnmapperFor = exports.wordsToSentenceMapper = exports.wordsToJoinedStringUnmapperFor = exports.wordsToJoinedStringMapper = void 0;\nfunction wordsToJoinedStringMapper(words) {\n    return words.map((w) => (w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w)).join(' ');\n}\nexports.wordsToJoinedStringMapper = wordsToJoinedStringMapper;\nfunction wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n    return function wordsToJoinedStringUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        const words = [];\n        for (const candidate of value.split(' ')) {\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexports.wordsToJoinedStringUnmapperFor = wordsToJoinedStringUnmapperFor;\nfunction wordsToSentenceMapper(words) {\n    let sentence = words.join(' ');\n    if (sentence[sentence.length - 1] === ',') {\n        sentence = sentence.substr(0, sentence.length - 1);\n    }\n    return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexports.wordsToSentenceMapper = wordsToSentenceMapper;\nfunction wordsToSentenceUnmapperFor(wordsArbitrary) {\n    return function wordsToSentenceUnmapper(value) {\n        if (typeof value !== 'string') {\n            throw new Error('Unsupported type');\n        }\n        if (value.length < 2 ||\n            value[value.length - 1] !== '.' ||\n            value[value.length - 2] === ',' ||\n            value[0].toLowerCase().toUpperCase() !== value[0]) {\n            throw new Error('Unsupported value');\n        }\n        const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n        const words = [];\n        const candidates = adaptedValue.split(' ');\n        for (let idx = 0; idx !== candidates.length; ++idx) {\n            const candidate = candidates[idx];\n            if (wordsArbitrary.canShrinkWithoutContext(candidate))\n                words.push(candidate);\n            else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ','))\n                words.push(candidate + ',');\n            else\n                throw new Error('Unsupported word');\n        }\n        return words;\n    };\n}\nexports.wordsToSentenceUnmapperFor = wordsToSentenceUnmapperFor;\nfunction sentencesToParagraphMapper(sentences) {\n    return sentences.join(' ');\n}\nexports.sentencesToParagraphMapper = sentencesToParagraphMapper;\nfunction sentencesToParagraphUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const sentences = value.split('. ');\n    for (let idx = 0; idx < sentences.length - 1; ++idx) {\n        sentences[idx] += '.';\n    }\n    return sentences;\n}\nexports.sentencesToParagraphUnmapper = sentencesToParagraphUnmapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}