{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReplayPath = void 0;\nclass ReplayPath {\n  static parse(replayPathStr) {\n    const [serializedCount, serializedChanges] = replayPathStr.split(':');\n    const counts = this.parseCounts(serializedCount);\n    const changes = this.parseChanges(serializedChanges);\n    return this.parseOccurences(counts, changes);\n  }\n  static stringify(replayPath) {\n    const occurences = this.countOccurences(replayPath);\n    const serializedCount = this.stringifyCounts(occurences);\n    const serializedChanges = this.stringifyChanges(occurences);\n    return `${serializedCount}:${serializedChanges}`;\n  }\n  static intToB64(n) {\n    if (n < 26) return String.fromCharCode(n + 65);\n    if (n < 52) return String.fromCharCode(n + 97 - 26);\n    if (n < 62) return String.fromCharCode(n + 48 - 52);\n    return String.fromCharCode(n === 62 ? 43 : 47);\n  }\n  static b64ToInt(c) {\n    if (c >= 'a') return c.charCodeAt(0) - 97 + 26;\n    if (c >= 'A') return c.charCodeAt(0) - 65;\n    if (c >= '0') return c.charCodeAt(0) - 48 + 52;\n    return c === '+' ? 62 : 63;\n  }\n  static countOccurences(replayPath) {\n    return replayPath.reduce((counts, cur) => {\n      if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur) counts.push({\n        value: cur,\n        count: 1\n      });else counts[counts.length - 1].count += 1;\n      return counts;\n    }, []);\n  }\n  static parseOccurences(counts, changes) {\n    const replayPath = [];\n    for (let idx = 0; idx !== counts.length; ++idx) {\n      const count = counts[idx];\n      const value = changes[idx];\n      for (let num = 0; num !== count; ++num) replayPath.push(value);\n    }\n    return replayPath;\n  }\n  static stringifyChanges(occurences) {\n    let serializedChanges = '';\n    for (let idx = 0; idx < occurences.length; idx += 6) {\n      const changesInt = occurences.slice(idx, idx + 6).reduceRight((prev, cur) => prev * 2 + (cur.value ? 1 : 0), 0);\n      serializedChanges += this.intToB64(changesInt);\n    }\n    return serializedChanges;\n  }\n  static parseChanges(serializedChanges) {\n    const changesInt = serializedChanges.split('').map(c => this.b64ToInt(c));\n    const changes = [];\n    for (let idx = 0; idx !== changesInt.length; ++idx) {\n      let current = changesInt[idx];\n      for (let n = 0; n !== 6; ++n, current >>= 1) {\n        changes.push(current % 2 === 1);\n      }\n    }\n    return changes;\n  }\n  static stringifyCounts(occurences) {\n    return occurences.map(_ref => {\n      let {\n        count\n      } = _ref;\n      return this.intToB64(count - 1);\n    }).join('');\n  }\n  static parseCounts(serializedCount) {\n    return serializedCount.split('').map(c => this.b64ToInt(c) + 1);\n  }\n}\nexports.ReplayPath = ReplayPath;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReplayPath","parse","replayPathStr","serializedCount","serializedChanges","split","counts","parseCounts","changes","parseChanges","parseOccurences","stringify","replayPath","occurences","countOccurences","stringifyCounts","stringifyChanges","intToB64","n","String","fromCharCode","b64ToInt","c","charCodeAt","reduce","cur","length","count","push","idx","num","changesInt","slice","reduceRight","prev","map","current","_ref","join"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/check/model/ReplayPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReplayPath = void 0;\nclass ReplayPath {\n    static parse(replayPathStr) {\n        const [serializedCount, serializedChanges] = replayPathStr.split(':');\n        const counts = this.parseCounts(serializedCount);\n        const changes = this.parseChanges(serializedChanges);\n        return this.parseOccurences(counts, changes);\n    }\n    static stringify(replayPath) {\n        const occurences = this.countOccurences(replayPath);\n        const serializedCount = this.stringifyCounts(occurences);\n        const serializedChanges = this.stringifyChanges(occurences);\n        return `${serializedCount}:${serializedChanges}`;\n    }\n    static intToB64(n) {\n        if (n < 26)\n            return String.fromCharCode(n + 65);\n        if (n < 52)\n            return String.fromCharCode(n + 97 - 26);\n        if (n < 62)\n            return String.fromCharCode(n + 48 - 52);\n        return String.fromCharCode(n === 62 ? 43 : 47);\n    }\n    static b64ToInt(c) {\n        if (c >= 'a')\n            return c.charCodeAt(0) - 97 + 26;\n        if (c >= 'A')\n            return c.charCodeAt(0) - 65;\n        if (c >= '0')\n            return c.charCodeAt(0) - 48 + 52;\n        return c === '+' ? 62 : 63;\n    }\n    static countOccurences(replayPath) {\n        return replayPath.reduce((counts, cur) => {\n            if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur)\n                counts.push({ value: cur, count: 1 });\n            else\n                counts[counts.length - 1].count += 1;\n            return counts;\n        }, []);\n    }\n    static parseOccurences(counts, changes) {\n        const replayPath = [];\n        for (let idx = 0; idx !== counts.length; ++idx) {\n            const count = counts[idx];\n            const value = changes[idx];\n            for (let num = 0; num !== count; ++num)\n                replayPath.push(value);\n        }\n        return replayPath;\n    }\n    static stringifyChanges(occurences) {\n        let serializedChanges = '';\n        for (let idx = 0; idx < occurences.length; idx += 6) {\n            const changesInt = occurences\n                .slice(idx, idx + 6)\n                .reduceRight((prev, cur) => prev * 2 + (cur.value ? 1 : 0), 0);\n            serializedChanges += this.intToB64(changesInt);\n        }\n        return serializedChanges;\n    }\n    static parseChanges(serializedChanges) {\n        const changesInt = serializedChanges.split('').map((c) => this.b64ToInt(c));\n        const changes = [];\n        for (let idx = 0; idx !== changesInt.length; ++idx) {\n            let current = changesInt[idx];\n            for (let n = 0; n !== 6; ++n, current >>= 1) {\n                changes.push(current % 2 === 1);\n            }\n        }\n        return changes;\n    }\n    static stringifyCounts(occurences) {\n        return occurences.map(({ count }) => this.intToB64(count - 1)).join('');\n    }\n    static parseCounts(serializedCount) {\n        return serializedCount.split('').map((c) => this.b64ToInt(c) + 1);\n    }\n}\nexports.ReplayPath = ReplayPath;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}