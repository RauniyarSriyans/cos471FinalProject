{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CloneArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst symbols_1 = require(\"../../check/symbols\");\nconst Stream_1 = require(\"../../stream/Stream\");\nclass CloneArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(arb, numValues) {\n    super();\n    this.arb = arb;\n    this.numValues = numValues;\n  }\n  generate(mrng, biasFactor) {\n    const items = [];\n    if (this.numValues <= 0) {\n      return this.wrapper(items);\n    }\n    for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n      items.push(this.arb.generate(mrng.clone(), biasFactor));\n    }\n    items.push(this.arb.generate(mrng, biasFactor));\n    return this.wrapper(items);\n  }\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || value.length !== this.numValues) {\n      return false;\n    }\n    if (value.length === 0) {\n      return true;\n    }\n    for (let index = 1; index < value.length; ++index) {\n      if (!Object.is(value[0], value[index])) {\n        return false;\n      }\n    }\n    return this.arb.canShrinkWithoutContext(value[0]);\n  }\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream_1.Stream.nil();\n    }\n    return new Stream_1.Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map(v => this.wrapper(v));\n  }\n  *shrinkImpl(value, contexts) {\n    const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n    let cur = its.map(it => it.next());\n    while (!cur[0].done) {\n      yield cur.map(c => c.value);\n      cur = its.map(it => it.next());\n    }\n  }\n  static makeItCloneable(vs, shrinkables) {\n    vs[symbols_1.cloneMethod] = () => {\n      const cloned = [];\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n    return vs;\n  }\n  wrapper(items) {\n    let cloneable = false;\n    const vs = [];\n    const contexts = [];\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      contexts.push(s.context);\n    }\n    if (cloneable) {\n      CloneArbitrary.makeItCloneable(vs, items);\n    }\n    return new Value_1.Value(vs, contexts);\n  }\n}\nexports.CloneArbitrary = CloneArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","CloneArbitrary","Arbitrary_1","require","Value_1","symbols_1","Stream_1","Arbitrary","constructor","arb","numValues","generate","mrng","biasFactor","items","wrapper","idx","push","clone","canShrinkWithoutContext","Array","isArray","length","index","is","shrink","context","Stream","nil","shrinkImpl","undefined","map","v","contexts","its","Symbol","iterator","cur","it","next","done","c","makeItCloneable","vs","shrinkables","cloneMethod","cloned","cloneable","s","hasToBeCloned","Value"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/CloneArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloneArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst symbols_1 = require(\"../../check/symbols\");\nconst Stream_1 = require(\"../../stream/Stream\");\nclass CloneArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(arb, numValues) {\n        super();\n        this.arb = arb;\n        this.numValues = numValues;\n    }\n    generate(mrng, biasFactor) {\n        const items = [];\n        if (this.numValues <= 0) {\n            return this.wrapper(items);\n        }\n        for (let idx = 0; idx !== this.numValues - 1; ++idx) {\n            items.push(this.arb.generate(mrng.clone(), biasFactor));\n        }\n        items.push(this.arb.generate(mrng, biasFactor));\n        return this.wrapper(items);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.numValues) {\n            return false;\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (let index = 1; index < value.length; ++index) {\n            if (!Object.is(value[0], value[index])) {\n                return false;\n            }\n        }\n        return this.arb.canShrinkWithoutContext(value[0]);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream_1.Stream.nil();\n        }\n        return new Stream_1.Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map((v) => this.wrapper(v));\n    }\n    *shrinkImpl(value, contexts) {\n        const its = value.map((v, idx) => this.arb.shrink(v, contexts[idx])[Symbol.iterator]());\n        let cur = its.map((it) => it.next());\n        while (!cur[0].done) {\n            yield cur.map((c) => c.value);\n            cur = its.map((it) => it.next());\n        }\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[symbols_1.cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    wrapper(items) {\n        let cloneable = false;\n        const vs = [];\n        const contexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            contexts.push(s.context);\n        }\n        if (cloneable) {\n            CloneArbitrary.makeItCloneable(vs, items);\n        }\n        return new Value_1.Value(vs, contexts);\n    }\n}\nexports.CloneArbitrary = CloneArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}