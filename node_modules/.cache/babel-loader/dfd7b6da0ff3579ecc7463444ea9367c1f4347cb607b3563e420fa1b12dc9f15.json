{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunExecution = void 0;\nconst VerbosityLevel_1 = require(\"../configuration/VerbosityLevel\");\nconst ExecutionStatus_1 = require(\"./ExecutionStatus\");\nclass RunExecution {\n  constructor(verbosity, interruptedAsFailure) {\n    this.verbosity = verbosity;\n    this.interruptedAsFailure = interruptedAsFailure;\n    this.isSuccess = () => this.pathToFailure == null;\n    this.firstFailure = () => this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1;\n    this.numShrinks = () => this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0;\n    this.rootExecutionTrees = [];\n    this.currentLevelExecutionTrees = this.rootExecutionTrees;\n    this.failure = null;\n    this.numSkips = 0;\n    this.numSuccesses = 0;\n    this.interrupted = false;\n  }\n  appendExecutionTree(status, value) {\n    const currentTree = {\n      status,\n      value,\n      children: []\n    };\n    this.currentLevelExecutionTrees.push(currentTree);\n    return currentTree;\n  }\n  fail(value, id, failure) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.Verbose) {\n      const currentTree = this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Failure, value);\n      this.currentLevelExecutionTrees = currentTree.children;\n    }\n    if (this.pathToFailure == null) this.pathToFailure = `${id}`;else this.pathToFailure += `:${id}`;\n    this.value = value;\n    this.failure = failure;\n  }\n  skip(value) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Skipped, value);\n    }\n    if (this.pathToFailure == null) {\n      ++this.numSkips;\n    }\n  }\n  success(value) {\n    if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n      this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Success, value);\n    }\n    if (this.pathToFailure == null) {\n      ++this.numSuccesses;\n    }\n  }\n  interrupt() {\n    this.interrupted = true;\n  }\n  extractFailures() {\n    if (this.isSuccess()) {\n      return [];\n    }\n    const failures = [];\n    let cursor = this.rootExecutionTrees;\n    while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus_1.ExecutionStatus.Failure) {\n      const failureTree = cursor[cursor.length - 1];\n      failures.push(failureTree.value);\n      cursor = failureTree.children;\n    }\n    return failures;\n  }\n  toRunDetails(seed, basePath, maxSkips, qParams) {\n    if (!this.isSuccess()) {\n      return {\n        failed: true,\n        interrupted: this.interrupted,\n        numRuns: this.firstFailure() + 1 - this.numSkips,\n        numSkips: this.numSkips,\n        numShrinks: this.numShrinks(),\n        seed,\n        counterexample: this.value,\n        counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n        error: this.failure.errorMessage,\n        errorInstance: this.failure.error,\n        failures: this.extractFailures(),\n        executionSummary: this.rootExecutionTrees,\n        verbose: this.verbosity,\n        runConfiguration: qParams.toParameters()\n      };\n    }\n    const failed = this.numSkips > maxSkips || this.interrupted && this.interruptedAsFailure;\n    return {\n      failed,\n      interrupted: this.interrupted,\n      numRuns: this.numSuccesses,\n      numSkips: this.numSkips,\n      numShrinks: 0,\n      seed,\n      counterexample: null,\n      counterexamplePath: null,\n      error: null,\n      errorInstance: null,\n      failures: [],\n      executionSummary: this.rootExecutionTrees,\n      verbose: this.verbosity,\n      runConfiguration: qParams.toParameters()\n    };\n  }\n}\nexports.RunExecution = RunExecution;\nRunExecution.mergePaths = (offsetPath, path) => {\n  if (offsetPath.length === 0) return path;\n  const offsetItems = offsetPath.split(':');\n  const remainingItems = path.split(':');\n  const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n  return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","RunExecution","VerbosityLevel_1","require","ExecutionStatus_1","constructor","verbosity","interruptedAsFailure","isSuccess","pathToFailure","firstFailure","split","numShrinks","length","rootExecutionTrees","currentLevelExecutionTrees","failure","numSkips","numSuccesses","interrupted","appendExecutionTree","status","currentTree","children","push","fail","id","VerbosityLevel","Verbose","ExecutionStatus","Failure","skip","VeryVerbose","Skipped","success","Success","interrupt","extractFailures","failures","cursor","failureTree","toRunDetails","seed","basePath","maxSkips","qParams","failed","numRuns","counterexample","counterexamplePath","mergePaths","error","errorMessage","errorInstance","executionSummary","verbose","runConfiguration","toParameters","offsetPath","path","offsetItems","remainingItems","middle","slice","join"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/check/runner/reporter/RunExecution.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunExecution = void 0;\nconst VerbosityLevel_1 = require(\"../configuration/VerbosityLevel\");\nconst ExecutionStatus_1 = require(\"./ExecutionStatus\");\nclass RunExecution {\n    constructor(verbosity, interruptedAsFailure) {\n        this.verbosity = verbosity;\n        this.interruptedAsFailure = interruptedAsFailure;\n        this.isSuccess = () => this.pathToFailure == null;\n        this.firstFailure = () => (this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1);\n        this.numShrinks = () => (this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0);\n        this.rootExecutionTrees = [];\n        this.currentLevelExecutionTrees = this.rootExecutionTrees;\n        this.failure = null;\n        this.numSkips = 0;\n        this.numSuccesses = 0;\n        this.interrupted = false;\n    }\n    appendExecutionTree(status, value) {\n        const currentTree = { status, value, children: [] };\n        this.currentLevelExecutionTrees.push(currentTree);\n        return currentTree;\n    }\n    fail(value, id, failure) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.Verbose) {\n            const currentTree = this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Failure, value);\n            this.currentLevelExecutionTrees = currentTree.children;\n        }\n        if (this.pathToFailure == null)\n            this.pathToFailure = `${id}`;\n        else\n            this.pathToFailure += `:${id}`;\n        this.value = value;\n        this.failure = failure;\n    }\n    skip(value) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Skipped, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSkips;\n        }\n    }\n    success(value) {\n        if (this.verbosity >= VerbosityLevel_1.VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus_1.ExecutionStatus.Success, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSuccesses;\n        }\n    }\n    interrupt() {\n        this.interrupted = true;\n    }\n    extractFailures() {\n        if (this.isSuccess()) {\n            return [];\n        }\n        const failures = [];\n        let cursor = this.rootExecutionTrees;\n        while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus_1.ExecutionStatus.Failure) {\n            const failureTree = cursor[cursor.length - 1];\n            failures.push(failureTree.value);\n            cursor = failureTree.children;\n        }\n        return failures;\n    }\n    toRunDetails(seed, basePath, maxSkips, qParams) {\n        if (!this.isSuccess()) {\n            return {\n                failed: true,\n                interrupted: this.interrupted,\n                numRuns: this.firstFailure() + 1 - this.numSkips,\n                numSkips: this.numSkips,\n                numShrinks: this.numShrinks(),\n                seed,\n                counterexample: this.value,\n                counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n                error: this.failure.errorMessage,\n                errorInstance: this.failure.error,\n                failures: this.extractFailures(),\n                executionSummary: this.rootExecutionTrees,\n                verbose: this.verbosity,\n                runConfiguration: qParams.toParameters(),\n            };\n        }\n        const failed = this.numSkips > maxSkips || (this.interrupted && this.interruptedAsFailure);\n        return {\n            failed,\n            interrupted: this.interrupted,\n            numRuns: this.numSuccesses,\n            numSkips: this.numSkips,\n            numShrinks: 0,\n            seed,\n            counterexample: null,\n            counterexamplePath: null,\n            error: null,\n            errorInstance: null,\n            failures: [],\n            executionSummary: this.rootExecutionTrees,\n            verbose: this.verbosity,\n            runConfiguration: qParams.toParameters(),\n        };\n    }\n}\nexports.RunExecution = RunExecution;\nRunExecution.mergePaths = (offsetPath, path) => {\n    if (offsetPath.length === 0)\n        return path;\n    const offsetItems = offsetPath.split(':');\n    const remainingItems = path.split(':');\n    const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n    return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}