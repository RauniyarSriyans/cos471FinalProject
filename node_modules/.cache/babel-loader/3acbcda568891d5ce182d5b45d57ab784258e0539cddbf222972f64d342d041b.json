{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IntegerArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst BiasNumericRange_1 = require(\"./helpers/BiasNumericRange\");\nconst ShrinkInteger_1 = require(\"./helpers/ShrinkInteger\");\nclass IntegerArbitrary extends Arbitrary_1.Arbitrary {\n  constructor(min, max) {\n    super();\n    this.min = min;\n    this.max = max;\n  }\n  generate(mrng, biasFactor) {\n    const range = this.computeGenerateRange(mrng, biasFactor);\n    return new Value_1.Value(mrng.nextInt(range.min, range.max), undefined);\n  }\n  canShrinkWithoutContext(value) {\n    return typeof value === 'number' && Number.isInteger(value) && !Object.is(value, -0) && this.min <= value && value <= this.max;\n  }\n  shrink(current, context) {\n    if (!IntegerArbitrary.isValidContext(current, context)) {\n      const target = this.defaultTarget();\n      return (0, ShrinkInteger_1.shrinkInteger)(current, target, true);\n    }\n    if (this.isLastChanceTry(current, context)) {\n      return Stream_1.Stream.of(new Value_1.Value(context, undefined));\n    }\n    return (0, ShrinkInteger_1.shrinkInteger)(current, context, false);\n  }\n  defaultTarget() {\n    if (this.min <= 0 && this.max >= 0) {\n      return 0;\n    }\n    return this.min < 0 ? this.max : this.min;\n  }\n  computeGenerateRange(mrng, biasFactor) {\n    if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        min: this.min,\n        max: this.max\n      };\n    }\n    const ranges = (0, BiasNumericRange_1.biasNumericRange)(this.min, this.max, BiasNumericRange_1.integerLogLike);\n    if (ranges.length === 1) {\n      return ranges[0];\n    }\n    const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n    return id < 0 ? ranges[0] : ranges[id + 1];\n  }\n  isLastChanceTry(current, context) {\n    if (current > 0) return current === context + 1 && current > this.min;\n    if (current < 0) return current === context - 1 && current < this.max;\n    return false;\n  }\n  static isValidContext(current, context) {\n    if (context === undefined) {\n      return false;\n    }\n    if (typeof context !== 'number') {\n      throw new Error(`Invalid context type passed to IntegerArbitrary (#1)`);\n    }\n    if (context !== 0 && Math.sign(current) !== Math.sign(context)) {\n      throw new Error(`Invalid context value passed to IntegerArbitrary (#2)`);\n    }\n    return true;\n  }\n}\nexports.IntegerArbitrary = IntegerArbitrary;","map":{"version":3,"names":["Object","defineProperty","exports","value","IntegerArbitrary","Arbitrary_1","require","Value_1","Stream_1","BiasNumericRange_1","ShrinkInteger_1","Arbitrary","constructor","min","max","generate","mrng","biasFactor","range","computeGenerateRange","Value","nextInt","undefined","canShrinkWithoutContext","Number","isInteger","is","shrink","current","context","isValidContext","target","defaultTarget","shrinkInteger","isLastChanceTry","Stream","of","ranges","biasNumericRange","integerLogLike","length","id","Error","Math","sign"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/IntegerArbitrary.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IntegerArbitrary = void 0;\nconst Arbitrary_1 = require(\"../../check/arbitrary/definition/Arbitrary\");\nconst Value_1 = require(\"../../check/arbitrary/definition/Value\");\nconst Stream_1 = require(\"../../stream/Stream\");\nconst BiasNumericRange_1 = require(\"./helpers/BiasNumericRange\");\nconst ShrinkInteger_1 = require(\"./helpers/ShrinkInteger\");\nclass IntegerArbitrary extends Arbitrary_1.Arbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        return new Value_1.Value(mrng.nextInt(range.min, range.max), undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return (typeof value === 'number' &&\n            Number.isInteger(value) &&\n            !Object.is(value, -0) &&\n            this.min <= value &&\n            value <= this.max);\n    }\n    shrink(current, context) {\n        if (!IntegerArbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return (0, ShrinkInteger_1.shrinkInteger)(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream_1.Stream.of(new Value_1.Value(context, undefined));\n        }\n        return (0, ShrinkInteger_1.shrinkInteger)(current, context, false);\n    }\n    defaultTarget() {\n        if (this.min <= 0 && this.max >= 0) {\n            return 0;\n        }\n        return this.min < 0 ? this.max : this.min;\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = (0, BiasNumericRange_1.biasNumericRange)(this.min, this.max, BiasNumericRange_1.integerLogLike);\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    isLastChanceTry(current, context) {\n        if (current > 0)\n            return current === context + 1 && current > this.min;\n        if (current < 0)\n            return current === context - 1 && current < this.max;\n        return false;\n    }\n    static isValidContext(current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'number') {\n            throw new Error(`Invalid context type passed to IntegerArbitrary (#1)`);\n        }\n        if (context !== 0 && Math.sign(current) !== Math.sign(context)) {\n            throw new Error(`Invalid context value passed to IntegerArbitrary (#2)`);\n        }\n        return true;\n    }\n}\nexports.IntegerArbitrary = IntegerArbitrary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}