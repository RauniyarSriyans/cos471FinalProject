{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexToDouble = exports.doubleToIndex = exports.decomposeDouble = void 0;\nconst ArrayInt64_1 = require(\"./ArrayInt64\");\nconst INDEX_POSITIVE_INFINITY = {\n  sign: 1,\n  data: [2146435072, 0]\n};\nconst INDEX_NEGATIVE_INFINITY = {\n  sign: -1,\n  data: [2146435072, 1]\n};\nfunction decomposeDouble(d) {\n  const maxSignificand = 2 - Number.EPSILON;\n  for (let exponent = -1022; exponent !== 1024; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n    if (Math.abs(d) <= maxForExponent) {\n      return {\n        exponent,\n        significand: d / powExponent\n      };\n    }\n  }\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\nexports.decomposeDouble = decomposeDouble;\nfunction positiveNumberToInt64(n) {\n  return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n  if (exponent === -1022) {\n    const rescaledSignificand = significand * 2 ** 52;\n    return positiveNumberToInt64(rescaledSignificand);\n  }\n  const rescaledSignificand = (significand - 1) * 2 ** 52;\n  const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n  const index = positiveNumberToInt64(rescaledSignificand);\n  index[0] += exponentOnlyHigh;\n  return index;\n}\nfunction doubleToIndex(d) {\n  if (d === Number.POSITIVE_INFINITY) {\n    return (0, ArrayInt64_1.clone64)(INDEX_POSITIVE_INFINITY);\n  }\n  if (d === Number.NEGATIVE_INFINITY) {\n    return (0, ArrayInt64_1.clone64)(INDEX_NEGATIVE_INFINITY);\n  }\n  const decomp = decomposeDouble(d);\n  const exponent = decomp.exponent;\n  const significand = decomp.significand;\n  if (d > 0 || d === 0 && 1 / d === Number.POSITIVE_INFINITY) {\n    return {\n      sign: 1,\n      data: indexInDoubleFromDecomp(exponent, significand)\n    };\n  } else {\n    const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n    if (indexOpposite[1] === 0xffffffff) {\n      indexOpposite[0] += 1;\n      indexOpposite[1] = 0;\n    } else {\n      indexOpposite[1] += 1;\n    }\n    return {\n      sign: -1,\n      data: indexOpposite\n    };\n  }\n}\nexports.doubleToIndex = doubleToIndex;\nfunction indexToDouble(index) {\n  if (index.sign === -1) {\n    const indexOpposite = {\n      sign: 1,\n      data: [index.data[0], index.data[1]]\n    };\n    if (indexOpposite.data[1] === 0) {\n      indexOpposite.data[0] -= 1;\n      indexOpposite.data[1] = 0xffffffff;\n    } else {\n      indexOpposite.data[1] -= 1;\n    }\n    return -indexToDouble(indexOpposite);\n  }\n  if ((0, ArrayInt64_1.isEqual64)(index, INDEX_POSITIVE_INFINITY)) {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (index.data[0] < 0x200000) {\n    return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n  }\n  const postIndexHigh = index.data[0] - 0x200000;\n  const exponent = -1021 + (postIndexHigh >> 20);\n  const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n  return significand * 2 ** exponent;\n}\nexports.indexToDouble = indexToDouble;","map":{"version":3,"names":["Object","defineProperty","exports","value","indexToDouble","doubleToIndex","decomposeDouble","ArrayInt64_1","require","INDEX_POSITIVE_INFINITY","sign","data","INDEX_NEGATIVE_INFINITY","d","maxSignificand","Number","EPSILON","exponent","powExponent","maxForExponent","Math","abs","significand","NaN","positiveNumberToInt64","n","indexInDoubleFromDecomp","rescaledSignificand","exponentOnlyHigh","index","POSITIVE_INFINITY","clone64","NEGATIVE_INFINITY","decomp","indexOpposite","isEqual64","postIndexHigh"],"sources":["/Users/karimelbarbary/Desktop/test4/devote/node_modules/fast-check/lib/arbitrary/_internals/helpers/DoubleHelpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.indexToDouble = exports.doubleToIndex = exports.decomposeDouble = void 0;\nconst ArrayInt64_1 = require(\"./ArrayInt64\");\nconst INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };\nconst INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };\nfunction decomposeDouble(d) {\n    const maxSignificand = 2 - Number.EPSILON;\n    for (let exponent = -1022; exponent !== 1024; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(d) <= maxForExponent) {\n            return { exponent, significand: d / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nexports.decomposeDouble = decomposeDouble;\nfunction positiveNumberToInt64(n) {\n    return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n    if (exponent === -1022) {\n        const rescaledSignificand = significand * 2 ** 52;\n        return positiveNumberToInt64(rescaledSignificand);\n    }\n    const rescaledSignificand = (significand - 1) * 2 ** 52;\n    const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n    const index = positiveNumberToInt64(rescaledSignificand);\n    index[0] += exponentOnlyHigh;\n    return index;\n}\nfunction doubleToIndex(d) {\n    if (d === Number.POSITIVE_INFINITY) {\n        return (0, ArrayInt64_1.clone64)(INDEX_POSITIVE_INFINITY);\n    }\n    if (d === Number.NEGATIVE_INFINITY) {\n        return (0, ArrayInt64_1.clone64)(INDEX_NEGATIVE_INFINITY);\n    }\n    const decomp = decomposeDouble(d);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (d > 0 || (d === 0 && 1 / d === Number.POSITIVE_INFINITY)) {\n        return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };\n    }\n    else {\n        const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n        if (indexOpposite[1] === 0xffffffff) {\n            indexOpposite[0] += 1;\n            indexOpposite[1] = 0;\n        }\n        else {\n            indexOpposite[1] += 1;\n        }\n        return { sign: -1, data: indexOpposite };\n    }\n}\nexports.doubleToIndex = doubleToIndex;\nfunction indexToDouble(index) {\n    if (index.sign === -1) {\n        const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };\n        if (indexOpposite.data[1] === 0) {\n            indexOpposite.data[0] -= 1;\n            indexOpposite.data[1] = 0xffffffff;\n        }\n        else {\n            indexOpposite.data[1] -= 1;\n        }\n        return -indexToDouble(indexOpposite);\n    }\n    if ((0, ArrayInt64_1.isEqual64)(index, INDEX_POSITIVE_INFINITY)) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index.data[0] < 0x200000) {\n        return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n    }\n    const postIndexHigh = index.data[0] - 0x200000;\n    const exponent = -1021 + (postIndexHigh >> 20);\n    const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n    return significand * 2 ** exponent;\n}\nexports.indexToDouble = indexToDouble;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}